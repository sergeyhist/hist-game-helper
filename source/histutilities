#!/bin/bash
# Version: 1.4
set -euo pipefail

hi_exit() {
	rm -rf "$TEMPPATH"
	if [[ "$exit_flag" == "0" ]]; then
		listoptions "Restart HLU?" "Yes|No"
		if [[ "$select_ans" == "1" ]]; then exec "$0"; fi
	else echo -e "\n${rec}Exit${noc}\n"; fi
}

generalinput() {
	if [[ "$1" == *'|'* ]]; then
		gi_name="$(echo "$1" | cut -d'|' -f1)"
		gi_options="$(echo "$1" | cut -d'|' -f2)"
	else gi_name="$1"; gi_options="none"; fi
	if [[ "$gi_name" == *' ___ '* ]]; then
		gi_default="$(echo "$gi_name" | awk -F" ___ " '{print $2}')"
		gi_name="$(echo "$gi_name" | awk -F" ___ " '{print $1}')"
	else gi_default="none"; fi
	gi_file="$HISTORYPATH/.$gi_name"
	if [[ "$gi_options" == *"continue"* ]]; then gi_exit_string="/${grc}reset${noc}"; else gi_exit_string=""; fi
	if [[ ! -f "$gi_file" ]]; then touch "$gi_file"; fi
	history -r "$gi_file"
	if [[ "$gi_default" == "none" ]]; then echo -e "\nEnter $2 (${cyc}q|Q${noc} for ${grc}exit${noc}$gi_exit_string):"
	else echo -e "\nEnter $2 (Default: ${cyc}$gi_default${noc}) (${cyc}d|D${noc} for ${grc}default${noc}, ${cyc}q|Q${noc} for ${grc}exit${noc}$gi_exit_string):"; fi; read -re "input_ans"
	input_ans=${input_ans//\\/}
	if [[ "$input_ans" == [qQ] ]]; then
		if [[ "$gi_options" == *"continue"* ]]; then input_ans="none"; else exit; fi
	elif [[ "$input_ans" == [dD] && "${gi_default}" != "none" ]]; then input_ans="${gi_default}"
	elif [[ "$input_ans" == "" ]]; then generalinput "$1" "$2"
	else
		sed -i "\#${input_ans}#d" "$gi_file"
		echo "$input_ans" >> "$gi_file"; fi
	history -c
}

readfiles() {
	rf_count=0; unset file_names; unset file_dirs
	if [[ "$1" == *'|'* ]]; then
		file_title="$(echo "$1" | cut -d'|' -f1)"
		file_sort="$(echo "$1" | cut -d'|' -f2)"
	else file_title="$1"; file_sort="cat"; fi
	if [[ -s "$2" ]]; then
		echo -e "\n ${mac}$file_title${noc}\n"
		while read -r line; do
			if echo "$line" | grep -qo " | "; then
				file_names[$rf_count]="$(echo "$line" | awk -F" [|] " '{print $1}')"
				file_dirs[$rf_count]="$(echo "$line" | awk -F" [|] " '{print $2}')"
				echo -e " ${cyc}$((rf_count+=1))${noc} - ${grc}${file_names[rf_count-1]}${noc} - ${blc}${file_dirs[rf_count-1]}${noc}"
			else
				file_dirs[$rf_count]="$line"
				echo -e " ${cyc}$((rf_count+=1))${noc} - ${grc}${line}${noc}"; fi; done < <($file_sort "$2")
		echo -e "\nChoose ${cyc}item${noc} from the ${grc}list${noc} above (${cyc}q|Q${noc} for ${grc}exit${noc}):"; read -r -e "select_ans"
		if [[ "$select_ans" == [qQйЙ] ]]; then exit
		elif [[ "$select_ans" == *[!0-9]* ]] || [[ "$select_ans" -gt "$((rf_count))" || "$select_ans" -lt "1" ]]; then readfiles "$1" "$2"
		else
			if [[ -n "${file_names[select_ans-1]:+x}" ]]; then read_result_name="${file_names[select_ans-1]}"; fi
			read_result_dir="${file_dirs[select_ans-1]}"; fi
	else echo -e "\n${grc}File${noc} is ${rec}empty${noc}"; exit; fi
}

addlines() {
	generalinput "$1" "${cyc}path${noc} to the ${grc}$1${noc} folder"; line_path="$input_ans"
	if [[ ! -d "$line_path" ]]; then mkdir -p "$line_path"; fi
	echo -e "$line_path" >> "$2"
}

deletelines() {
	readfiles "$1|sort" "$2"; line_path="$read_result_dir"
	sed -i "\#${line_path}#d" "$2"
	if [[ -d "$read_result_dir" ]]; then
		if [[ "$3" == "force" ]]; then select_ans="1"
		else listoptions "Delete folder from filesystem?" "Yes|No"; fi
		if [[ "$select_ans" == "1" ]]; then rm -rf "$line_path"; fi; fi
	if [[ ! -s "$2" ]]; then rm "$2"; fi
}

listoptions() {
	if [[ "$1" == *'|'* ]]; then
		list_title="$(echo "$1" | cut -d'|' -f1)"
		list_settings="$(echo "$1" | cut -d'|' -f2)"
	else list_title="$1"; list_settings="none"; fi
	if [[ "$2" == *' ___ '* ]]; then
		list_items="$(echo "$2" | awk -F" ___ " '{print $1}')"
		list_values="$(echo "$2" | awk -F" ___ " '{print $2}')"
	else list_items="$2"; list_values="none"; fi
	if [[ -n "$list_items" ]]; then
		IFS="|"; lo_count=0; sa_count=0
		echo -e "\n ${mac}$list_title${noc}\n"
		for item in $list_values; do
			status_array[$sa_count]="$item"; ((sa_count+=1)); done
		for option in $list_items; do
			if [[ "$list_values" != "none" && -n "${!status_array[lo_count]:+nex}" ]]; then
				if [[ "${!status_array[lo_count]}" != "on" ]]; then status_check=" - ${grc}ON${noc}${cyc} (${!status_array[lo_count]})${noc}"
				else status_check=" - ${cyc}ON${noc}"; fi
			elif [[ "$list_values" != "none" ]]; then
				status_check=" - ${rec}OFF${noc}"; else status_check=""; fi
			if [[ "$option" == "Reset Options" ]]; then status_check=""; fi
			list_array[$lo_count]="$option"
			echo -e " ${cyc}$((lo_count+=1))${noc}${status_check} - ${grc}$option${noc}"; done
		IFS="$Def_IFS"
		if [[ "$list_items" == "Yes|No" ]]; then echo -e "\nChoose ${cyc}Option${noc} from the list above:"
		else echo -e "\nChoose ${cyc}Option${noc} from the list above (${cyc}q|Q${noc} for ${grc}exit${noc}):"; fi; read -r -e "select_ans"
		if [[ "$select_ans" == [qQйЙ] && "$list_items" != "Yes|No" ]]; then
			if [[ "$list_settings" == *"continue"* ]]; then list_result_name="none"; list_result_number="0"
			elif [[ "$list_settings" == *"exit"* ]]; then exit_flag="1"; exit
			else exit; fi
		elif [[ "$select_ans" == *[!0-9]* ]] || [[ "$select_ans" -gt "$lo_count" || "$select_ans" -lt "1" ]]; then listoptions "$1" "$2"
		else list_result_name="${list_array[select_ans-1]}"; list_result_number="$select_ans"; fi
	else echo -e "\n${grc}List${noc} is ${mac}empty${noc}\n"; exit; fi
}

git-latest() {
  	git_version=$(curl --silent "https://api.github.com/repos/$1/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
}

runnerfinder() {
	IFS="|"
	for item in $1; do
			if [[ -f "$item" ]]; then
				while read -r line; do
					if [[ -d "$line" || -f "$line" ]]; then
						if [[ $(find "$line" -type f -name 'proton_dist*') ]]; then
							proton_tar=$(find "$line" -type f -name 'proton_dist*'); proton_tar_dir=$(dirname "$proton_tar")
							if [[ -d "$proton_tar_dir/dist" ]]; then
								if ! cmp -s "$proton_tar_dir/version" "$proton_tar_dir/dist/version"; then
									rm -rf "$proton_tar_dir/dist"; mkdir "$proton_tar_dir/dist"
									tar -xf "$proton_tar" -C "$proton_tar_dir/dist/"
									cat "$proton_tar_dir/version" > "$proton_tar_dir/dist/version"; fi
							else
								mkdir "$proton_tar_dir/dist"
								tar -xf "$proton_tar" -C "$proton_tar_dir/dist/"; fi; fi
						if [[ $(find "$line" -type f -name "wine") ]]; then
							runner_path="$(find "$line" -type f -name "wine")"
							if [[ -f "$line/version" ]]; then runner_version="$(cut -d' ' -f2 < "$line/version")"
							else runner_version="$($runner_path --version)"; fi
							echo "$runner_version | $runner_path" >> "$TEMPPATH/.runnerslist"; fi
					fi; done < "$item"; fi; done
	IFS="$Def_IFS"
}

prefixfinder() {
	IFS="|"
	for item in $1; do
		if [[ -f "$item" ]]; then
			while read -r line; do
			if [[ -d "$line" && $(find "$line" -type d -name "drive_c") ]]; then
					prefix_path="$(dirname "$(find "$line" -type d -name "drive_c")")"
					echo "$(basename "$prefix_path") | $prefix_path" >> "$TEMPPATH/.prefixeslist"; fi; done < "$item"; fi; done
	IFS="$Def_IFS"
}

runnerinit() {
	selected_runner=""; selected_runner_path=""
	if [[ -z "$selected_runner" ]]; then
		while : ; do
			if [[ "$1" != "proton" ]]; then echo "$(/usr/bin/wine --version) | /usr/bin/wine" > "$TEMPPATH/.runnerslist"; fi
			if [[ "$1" == "all" ]]; then runnerfinder "$HIPATH/addrun.cfg|$TEMPPATH/.steamrun"
			elif [[ "$1" == "wine" ]]; then runnerfinder "$HIPATH/addrun.cfg"
			elif [[ "$1" == "proton" ]]; then runnerfinder "$TEMPPATH/.steamrun"; fi
			if [[ "$1" != "proton" ]]; then echo "Add new runner" >> "$TEMPPATH/.runnerslist"; fi
			readfiles "Runners" "$TEMPPATH/.runnerslist"
			if [[ "$read_result_dir" == "Add new runner" ]]; then addlines "runner" "$HIPATH/addrun.cfg"
			else selected_runner="$read_result_dir"; selected_runner_path=$(dirname "$read_result_dir"); break; fi; done; fi
}

prefixinit() {
	selected_prefix=""
	while : ; do
		echo "Default prefix | $HOME/.wine" > "$TEMPPATH/.prefixeslist"
		prefixfinder "$HIPATH/addpfx.cfg"
		echo "Add new prefix" >> "$TEMPPATH/.prefixeslist"
		echo "Create new prefix" >> "$TEMPPATH/.prefixeslist"
		readfiles "Prefixes" "$TEMPPATH/.prefixeslist"
		if [[ "$read_result_dir" == "Add new prefix" ]]; then addlines "prefix" "$HIPATH/addpfx.cfg"
		elif [[ "$read_result_dir" == "Create new prefix" ]]; then	prefixcreator "all"
		else selected_prefix="$read_result_dir"; break; fi; done
}

prefixcreator() {
	if [[ "$1" == "all" ]]; then addlines "prefix" "$HIPATH/addpfx.cfg"; pfx_path="$line_path"
	elif [[ "$1" == "proton" ]]; then pfx_path="${line_path}"; if [[ ! -d "$pfx_path" ]]; then mkdir -p "$pfx_path"; fi; fi
	if [[ ! -d "${pfx_path}/drive_c" ]]; then
		if [[ -z "${selected_runner:+x}" ]]; then runnerinit "$1"; fi
		if [[ "$1" == "proton" ]]; then select_ans="2"
		else listoptions "Prefix Version" "32bit|64bit"; fi
		if [[ "$select_ans" == "1" ]]; then
			WINEARCH=win32 WINEPREFIX="$pfx_path" "$selected_runner" wineboot -u
		elif [[ "$select_ans" == "2" ]]; then
			WINEPREFIX="$pfx_path" "$selected_runner" wineboot -u; fi
	else echo -e "\n ${grc}Prefix${noc} already ${mac}exist${noc}\n"; fi
}

prefixcommands() {
	listoptions "Wine Functions" "Wine Config|Control Panel|Task Manager|Explorer|Install/Uninstall Apps|Registry Editor|Kill Running Apps|Force Kill Running Apps|Custom command"
	case "$select_ans" in
	"1")
	command_func="winecfg"
	;;
	"2")
	command_func="control"
	;;
	"3")
	command_func="taskmgr"
	;;
	"4")
	command_func="explorer"
	;;
	"5")
	command_func="uninstaller"
	;;
	"6")
	command_func="regedit"
	;;
	"7")
	command_func="wineserver -k"
	;;
	"8")
	command_func="wineserver -k9"
	;;
	"9")
	generalinput "prefixcommand" "${cyc}custom command${noc} (Example: ${cyc}notepad.exe${noc})"; command_func="$input_ans"
	esac
	if [[ "$command_func" == "wineserver -k" || "$command_func" == "wineserver -k9" ]]; then eval "WINEPREFIX=\"$selected_prefix\" $command_func"
	else
		if [[ "$1" == "proton" ]]; then runnerinit "proton"; else runnerinit "all"; fi
		eval "WINEPREFIX=\"$selected_prefix\" \"$selected_runner\" $command_func"; fi
}

packsinstaller() {
	packagetype=""; packageurl=""; packagearg=""; packagename=""; packagever=""
	find "$INSTPATH" -maxdepth 1 -mindepth 1 -type d | while read -r line; do basename "$line" >> "$TEMPPATH/.packsfolders"; done
	if [[ "$osversion" != "ArchLinux" ]]; then sed -i "/Arch/d" "$TEMPPATH/.packsfolders"; fi
	readfiles "Categories|sort" "$TEMPPATH/.packsfolders"
	selected_package_type="$read_result_dir"
	find "$INSTPATH/$selected_package_type" -maxdepth 1 -mindepth 1 -type f | while read -r line; do basename "$line" >> "$TEMPPATH/.packs"; done
	readfiles "Packages|sort" "$TEMPPATH/.packs"
	selected_package_name="$read_result_dir"
	selected_package="$INSTPATH/$selected_package_type/$selected_package_name"
	. "$selected_package"
	cd  "$PACKPATH"
	case "$packagetype" in
	"branch")
		name=$(basename -s .git "$packageurl")
		listoptions "Options" "Install/Reinstall ${noc} - ${blc}Check \"${cyc}$packageurl${blc}\" for additional information or necessary dependencies${noc}|Update|Uninstall"
		if [[ -f "$selected_package" ]]; then
			if [[ "$select_ans" == "1" ]]; then
				if [[ -d "$name" ]]; then rm -rf "$name"; fi
				if grep -oq "packagearg" "$selected_package"; then eval "git clone $packagearg $packageurl"
				else eval "git clone $packagearg $packageurl"; fi
				cd "$name"
				if grep -oq "packageinstall" "$selected_package"; then packageinstall; fi
			elif [[ "$select_ans" == "2" ]]; then
				if [[ -d "$name" ]]; then
					cd "$name"; git reset --hard; git pull "$packageurl"
					if grep -oq "packageinstall" "$selected_package"; then
						listoptions "Install? " "Yes|No"
						if [[ $select_ans == "1" ]]; then
							packageinstall; fi; fi
				else echo -e "\nFirst install the ${grc}package${noc}\n"; fi
			elif [[ "$select_ans" == "3" ]]; then
				if [[ -d "$name" ]]; then
					if grep -oq "packageuninstall" "$selected_package"; then cd "$name"; packageuninstall; cd ..; fi
					rm -rf "$name"
				else echo -e "\nFirst install the ${grc}package${noc}\n"; fi; fi
		else echo -e "\n${grc}Config file${noc} is ${mac}empty${noc}\n"; fi
	;;
	"release")
		name=$(basename -s .git "$packagename")
		listoptions "Options" "Install/Update|Uninstall"
		if [[ -f "$selected_package" ]]; then
			if [[ "$select_ans" == "1" ]]; then
				if [[ -d "$name" ]]; then rm -rf "$name"; fi
				mkdir "$name"; cd "$name"
				git-latest "$packagename"
				eval "wget \"https://github.com/$packagename/releases/download/${git_version}/${packagever//VERSION/$git_version}\""
				if grep -oq "packageinstall" "$selected_package"; then packageinstall; fi
			elif [[ "$select_ans" == "2" ]]; then
				if grep -oq "packageuninstall" "$selected_package"; then packageuninstall; fi
				rm -rf "$name"; fi
		else echo -e "\n${grc}Config file${noc} is ${mac}empty${noc}\n"; fi
	esac
}

steamlauchoptions() {
	flag=0; line_number=0; steam_command="%command%"
	readfiles "Steam games|sort" "$TEMPPATH/.steamapps"; launcher_name="$read_result_name"; launcher_steam_appid="$read_result_dir"; launcher_type="steam"
	if [[ -n "$launcher_steam_appid" ]]; then
		readfiles "Steam local configs|sort" "$TEMPPATH/.lcfiles"; launcher_lc="$read_result_dir"; settingsinit
		IFS='|'
			for item in $settings_overall_values; do
				if [[ "$item" == "custom_args" ]]; then steam_command="$steam_command ${!item}"
				else steam_command="${!item} $steam_command"; fi; done
		IFS="$Def_IFS"
		while pkill steam; do sleep 1s; done
		while read -r line; do
			((line_number+=1))
			if [[ $line == *'"Software"'* ]]; then flag=1; fi
			if [[ $flag == 1 && $line == *"Apps"* ]]; then flag=0; ((line_number+=2)); break; fi; done < "$launcher_lc"; fi
		sed -i "${line_number}i\ \t\t\t\t\t\"$launcher_steam_appid\"\n\t\t\t\t\t{\n\t\t\t\t\t\t\"LaunchOptions\" \t\"$steam_command\"\n\t\t\t\t\t}" "$launcher_lc"
}

steamfinder() {
	if [[ -f "$HOME/.steam/root/steamapps/libraryfolders.vdf" ]]; then
		numbers=$(grep -no "path" "$HOME/.steam/root/steamapps/libraryfolders.vdf" | cut -d: -f1)
		for item in $numbers; do
			steam_folder=$(sed -n "${item}p" "$HOME/.steam/root/steamapps/libraryfolders.vdf" | cut -d\" -f4)
			for item2 in "${steam_folder}/steamapps/appmanifest_"*'.acf'; do
				if [[ -f "$item2" ]]; then
					steam_name=$(grep '"name"' "$item2" | cut -d\" -f4)
					steam_appid=$(grep '"appid"' "$item2" | cut -d\" -f4)
					steam_dirname=$(grep '"installdir"' "$item2" | cut -d\" -f4)
					case $steam_name in
					*"Proton"* | *"Runtime"* | *"Steamworks"*)
					if [[ "$steam_dirname" == *"Proton"* ]]; then echo -e "$steam_folder/steamapps/common/$steam_dirname" >> "$TEMPPATH/.steamrun"; fi
					;;
					*)
					echo -e "$steam_name | $steam_appid" >> "$TEMPPATH/.steamapps"
					echo -e "$steam_name | $steam_folder/steamapps/common/$steam_dirname" >> "$TEMPPATH/.steamdirs"
					if [[ -d "$steam_folder/steamapps/compatdata/$steam_appid/pfx" ]]; then
						echo -e "$steam_name | $steam_folder/steamapps/compatdata/$steam_appid/pfx" >> "$TEMPPATH/.steampfx"
						echo -e "$steam_name | $steam_folder/steamapps/compatdata/$steam_appid" >> "$TEMPPATH/.steamgamecompat"; fi
					esac; fi
			done; done; fi
	if [[ -d "/usr/share/steam/compatibilitytools.d/" ]]; then
		find "/usr/share/steam/compatibilitytools.d/" -maxdepth 1 -mindepth 1 | while read -r line; do
			echo -e "$line" >> "$TEMPPATH/.steamrun"; done; fi
	if [[ -d "$HOME/.steam/root/compatibilitytools.d" ]]; then
		find "$HOME/.steam/root/compatibilitytools.d" -maxdepth 1 -mindepth 1 | while read -r line; do
			echo -e "$line" >> "$TEMPPATH/.steamrun"; done; fi
	find "$HOME/.steam/steam/userdata/" -name "localconfig.vdf" | while read -r line; do
		steam_profile_name=$(grep '"PersonaName"' "$line" | cut -d\" -f4)
		echo -e "${steam_profile_name} | ${line}" >> "$TEMPPATH/.lcfiles"; done
}

execinit() {
	generalinput "execfiles" "${cyc}path${noc} to the ${grc}folder with executable${noc} or ${cyc}full path${noc} to ${grc}executable${noc}"
	if [[ -f $(echo "$input_ans" | awk '{$1=$1};1') ]]; then
		input_ans="$(echo "$input_ans" | awk '{$1=$1};1')"
		init_result_name="$(basename -s .exe "$input_ans")"; init_result_dir=$(dirname "$input_ans"); init_result="$input_ans"
	else
		case "$1" in
		"wine")
			find "$input_ans" -name "*.exe" -o -name "*.msi" | while read -r line; do echo -e "$(basename -s .exe "$line") | $line" >> "$TEMPPATH/.${1}files"; done
		;;
		"linux")
			find "$input_ans" -perm /111 -type f ! -name "*.dll" ! -name "*.so" | while read -r line; do echo -e "$(basename "$line") | $line" >> "$TEMPPATH/.${1}files"; done
		esac
		if [[ -s "$TEMPPATH/.${1}files" ]]; then
			readfiles "${1^} Executables|sort" "$TEMPPATH/.${1}files"
			init_result_name="$read_result_name"; init_result_dir=$(dirname "$read_result_dir"); init_result="$read_result_dir"
		else echo -e "\n ${grc}Executable${noc} ${mac}not found${noc}\n"; exit; fi; fi
}

launchercreator() {
	launcher_type="$1"
	if [[ "$launcher_type" == "wine" ]]; then prefixinit; runnerinit "all"; fi
	execinit "$launcher_type"
	launcher_name=$init_result_name; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"
	generalinput "launchername ___ $launcher_name" "${cyc}name${noc} of the ${grc}launcher${noc}"; launcher_name="$input_ans"
	settingsinit; launchercompleteinit "created"
}

launchereditor () {
	launcher_name="$1"; launcher_path="$LAUNCHPATH/$1"
	. "$launcher_path" "read_vars"
	if [[ "$launcher_type" == "wine" ]]; then
		listoptions "Launcher Setup" "Change Launch Options|Change Prefix|Change Runner|Change Executable"
		if [[ "$select_ans" == "1" ]]; then settingsinit
		elif [[ "$select_ans" == "2" ]]; then prefixinit
		elif [[ "$select_ans" == "3" ]]; then runnerinit "all"
		elif [[ "$select_ans" == "4" ]]; then execinit "$launcher_type"; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"; fi
	elif [[ "$launcher_type" == "linux" ]]; then
		listoptions "Launcher Setup" "Change Launch Options|Change Executable"
		if [[ "$select_ans" == "1" ]]; then settingsinit
		elif [[ "$select_ans" == "2" ]]; then execinit "$launcher_type"; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"; fi; fi
	launchercompleteinit "updated"
}

launchercompleteinit() {
	if [[ "$launcher_exec" == *".msi" ]]; then launcher_msi=" msiexec /i"; else launcher_msi=""; fi
	if [[ "$launcher_type" == "wine" ]]; then
		launcher_vars=" launcher_type=\"$launcher_type\"\n launcher_exec_dir=\"$launcher_exec_dir\"\n selected_runner=\"$selected_runner\"\n selected_prefix=\"$selected_prefix\"\n launcher_exec=\"$launcher_exec\"\n"
	elif [[ "$launcher_type" == "linux" ]]; then
		launcher_vars=" launcher_type=\"$launcher_type\"\n launcher_exec_dir=\"$launcher_exec_dir\"\n launcher_exec=\"$launcher_exec\"\n"; fi
	if [[ "$launcher_type" == "wine" ]]; then
		launcher_command="WINEPREFIX=\\\"\$selected_prefix\\\" \\\"\$selected_runner\\\"${launcher_msi}wine_vd \\\"\${launcher_exec}\\\""
	elif [[ "$launcher_type" == "linux" ]]; then
		launcher_command="\${launcher_exec}"; fi
	if [[ "${settings_overall_values:-x}" != *"wine_vd"* ]]; then launcher_command=${launcher_command//wine_vd/}; fi
	if [[ -n "${settings_overall_values:+x}" ]]; then
		launcher_settings=" settings_overall_values=\"$settings_overall_values\"\n"
		IFS='|'
		for item in ${settings_overall_values}; do
			settings_item="\${$item}"
			if [[ "$item" == "custom_args" ]]; then launcher_command="$launcher_command $settings_item"
			elif [[ "$item" == "wine_vd" ]]; then
				wine_vd_full="${!item}"
				wine_vd_part_before="$(echo "$wine_vd_full" | cut -d"'" -f2)"
				wine_vd_part_after="${wine_vd_part_before// /_}"
				wine_vd="${wine_vd_full//$wine_vd_part_before/$wine_vd_part_after}"
				launcher_command="${launcher_command//wine_vd/ \$$item}"
			elif [[ "${!item:=}" != "on" ]]; then launcher_command="$settings_item $launcher_command"; fi
			launcher_settings="$launcher_settings $item=\"${!item}\"\n"; done; IFS="$Def_IFS"; fi
	if [[ "${settings_overall_values:-x}" != *"debug_switch"* ]]; then launcher_command="$launcher_command &> \\\"/dev/null\\\""
	else launcher_command="$launcher_command &> \\\"$LOGPATH/${launcher_name// /_}.log\\\""; fi
	launcher_complete_command="#!/bin/bash\n${launcher_vars:=}\n${launcher_settings:=}\nif [[ \$1 != \"read_vars\" ]]; then\n\tcd \"\${launcher_exec_dir}\"\n\teval \"${launcher_command:=}\"\nfi"
		if [[ -f "$LAUNCHPATH/$launcher_name" || -L "$LAUNCHPATH/$launcher_name" ]]; then rm "$LAUNCHPATH/$launcher_name"; fi
		echo -e "$launcher_complete_command" > "$LAUNCHPATH/$launcher_name"
		chmod +x "$LAUNCHPATH/$launcher_name"
		if [[ ! -w "$launcher_exec_dir" ]]; then echo -e "\nLauncher ${grc}${launcher_name}${noc} successfully $1 in the ${grc}$LAUNCHPATH${noc} folder."
		else
			cp "$LAUNCHPATH/$launcher_name" "$launcher_exec_dir/$launcher_name.hlu"
			echo -e "\nLauncher ${grc}${launcher_name}${noc} successfully $1 in the ${grc}$LAUNCHPATH${noc} and ${grc}$launcher_exec_dir${noc} folders."; fi
}

settingsinit() {
	while read -r line; do
		settings_menu="${settings_menu:=}|$(basename -s '.cfg' "$line" | cut -d'_' -f2) options"
	done < <(find "$CONFPATH" -maxdepth 1 -mindepth 1 -type f | sort -n)
	settings_menu=${settings_menu:1}
	listoptions "Launcher setup|continue" "$settings_menu"
	while : ; do
		if [[ "$list_result_name" != "none" ]]; then
			settings_name="$(echo "$list_result_name" | cut -d' ' -f1)"
			settings_file="$(find "$CONFPATH" -name "*${settings_name}.cfg")"
			sa_count=0; sf_count=0
			settings_items="";settings_items_values=""
			while read -r line; do
				((sf_count+=1))
				if [[ "$line" == "#-->"* ]]; then settings_item_begin_string[$sa_count]="$sf_count"; ((sa_count+=1)); fi
			done < "$settings_file"
			for ((i=0; i<sa_count; i++)); do
				settings_items="${settings_items}|$(sed -n "$((settings_item_begin_string[i]+1))p" "$settings_file")"
				settings_items_values="${settings_items_values}|$(sed -n "$((settings_item_begin_string[i]+2))p" "$settings_file")"
			done
			settings_items=${settings_items:1}; settings_items_values=${settings_items_values:1}
			while [[ "$list_result_name" != "none" ]]; do
				listoptions "$settings_name|continue" "$settings_items ___ $settings_items_values"
				if [[ "$list_result_name" != "none" ]]; then
					settings_item_name="$(sed -n "$((settings_item_begin_string[list_result_number-1]+2))p" "$settings_file")"
					settings_item_limit="$(sed -n "$((settings_item_begin_string[list_result_number-1]+3))p" "$settings_file")"
					settings_item_limit_string="$(sed -n "$((settings_item_begin_string[list_result_number-1]+4))p" "$settings_file")"
					settings_item_input_text="$(sed -n "$((settings_item_begin_string[list_result_number-1]+5))p" "$settings_file")"
					settings_item_value="$(sed -n "$((settings_item_begin_string[list_result_number-1]+6))p" "$settings_file")"
					settings_item_default="$(sed -n "$((settings_item_begin_string[list_result_number-1]+7))p" "$settings_file")"
					settings_item_input_limit="$(sed -n "$((settings_item_begin_string[list_result_number-1]+8))p" "$settings_file")"
					if [[ "$settings_item_limit" == "none" ]]; then settings_item_limit='[[ "none" == "none" ]]'; fi
					if eval "$settings_item_limit"; then
						if [[ "$settings_item_input_text" != "none" ]]; then
							settings_item_input_value=""
							for ((i=1; i<=$(grep -o ' <|> ' <<< "$settings_item_input_text" | grep -c .)+1; i++)); do
							settings_item_input_text_temp="$(echo -e "${settings_item_input_text// <|> /\\n}" | sed -n "${i}p")"
							settings_item_value_temp="$(echo -e "${settings_item_value// <|> /\\n}" | sed -n "${i}p")"
							settings_item_default_temp="$(echo -e "${settings_item_default// <|> /\\n}" | sed -n "${i}p")"
							settings_item_input_limit_temp="$(echo -e "${settings_item_input_limit// <|> /\\n}" | sed -n "${i}p")"
							while : ; do
								generalinput "$settings_item_name-$i ___ $settings_item_default_temp|continue" "$settings_item_input_text_temp"
								if [[ "$settings_item_input_limit_temp" == "none" ]] || [[ "$input_ans" == "none" ]] || eval "$settings_item_input_limit_temp"; then
									break; fi
							done
							if [[ "$input_ans" != "none" ]]; then settings_item_input_value="$settings_item_input_value${settings_item_value_temp//gi_value/$input_ans}"
							else settings_item_input_value="none"; break; fi
							done
						else settings_item_input_value="none"; fi
						if [[ "$settings_item_input_value" != "none" ]];  then
							eval "$settings_item_name=\"$settings_item_input_value\""
						elif [[ "$settings_item_value" != "none" && "$settings_item_input_text" == "none" ]];  then
							if [[ -n "${!settings_item_name:+nex}" ]]; then eval "$settings_item_name=\"\""
							else eval "$settings_item_name=\"$settings_item_value\""; fi
						elif [[ "$settings_item_input_text" != "none" && "$settings_item_input_value" == "none" ]]; then
							eval "$settings_item_name=\"\""; fi
					else echo -e "\n $settings_item_limit_string\n"; fi; fi
			done
			listoptions "Launcher setup|continue" "$settings_menu"
			IFS='|'
			for item in $settings_items_values; do
				if [[ -n ${!item:+x} && ${!item:+x} != "" && "${settings_overall_values:-x}" != *"$item"* ]]; then settings_overall_values="${settings_overall_values:=}|$item"; fi; done; fi
			if [[ "${settings_overall_values:-x}" == "|"* ]]; then settings_overall_values="${settings_overall_values:1}"; fi
			if [[ -n "${settings_overall_values:+x}" ]]; then
				for item in $settings_overall_values; do
					if [[ ${!item:+x} == "" ]]; then
						settings_overall_values=${settings_overall_values//$item/}; settings_overall_values=${settings_overall_values//||/|}; fi; done; fi
			if [[ "${settings_overall_values:-x}" == "|"* ]]; then settings_overall_values="${settings_overall_values:1}"; fi
			if [[ "${settings_overall_values:-x}" == *"|" ]]; then settings_overall_values="${settings_overall_values::-1}"; fi
			IFS="$Def_IFS"
		if [[ "$list_result_name" == "none" ]]; then break; fi
	done
}

trap hi_exit EXIT; exit_flag="0"
Def_IFS=$'\n'; IFS=$Def_IFS
HIPATH="$HOME/Hist"; if [[ ! -d "$HIPATH"  ]]; then mkdir -p "$HIPATH"; fi
HISTORYPATH="$HIPATH/.historyfiles"; if [[ ! -d "$HISTORYPATH" ]]; then mkdir -p "$HISTORYPATH"; fi
LAUNCHPATH="$HIPATH/Launchers"; if [[ ! -d "$LAUNCHPATH" ]]; then mkdir -p "$LAUNCHPATH"; fi
TEMPPATH="$HIPATH/.temp"; if [[ ! -d "$TEMPPATH" ]]; then mkdir -p "$TEMPPATH"; else rm -rf "$TEMPPATH"; mkdir -p "$TEMPPATH"; fi
INSTPATH="$HIPATH/Installers"; if [[ ! -d "$INSTPATH" ]]; then mkdir -p "$INSTPATH"; fi
PACKPATH="$HIPATH/Packages"; if [[ ! -d "$PACKPATH" ]]; then mkdir -p "$PACKPATH"; fi
CONFPATH="$HIPATH/Configs"; if [[ ! -d "$CONFPATH" ]]; then mkdir -p "$CONFPATH"; fi
LOGPATH="$HIPATH/.logs"; if [[ ! -d "$LOGPATH" ]]; then mkdir -p "$LOGPATH"; fi
noc="\e[0m"; rec="\e[31m"; grc="\e[32m"; blc="\e[34m"; cyc="\e[36m"; mac="\e[91m"
eval "hostnamectl > \"$TEMPPATH/.osinfo\""
osversion="$(grep "Operating System" "$TEMPPATH/.osinfo" | cut -d: -f2)"; osversion=${osversion// /}
if [[ -d "$HOME/.steam" ]]; then steamfinder; fi
listoptions "Hist Linux Utilities|exit" "Launcher Controller|Wine Helper|Steam Helper|Package Installer|Arch Updater"
case "$select_ans" in
"1") #Launcher Controller
	find "$LAUNCHPATH" -maxdepth 1 -mindepth 1 -type f,l | while read -r line; do
		if [[ -f "$line" ]]; then basename "$line" >> "$TEMPPATH/.launcherslist"; fi; done
	listoptions "Launcher Controller" "Create launcher|Edit launcher|Delete launcher|Open launcher in text editor|Run launcher"
		if [[ "$select_ans" == "1" ]]; then
			listoptions "Launcher Creator" "Wine App|Linux App"
			if [[ "$select_ans" == "1" ]]; then
				launchercreator "wine"
			elif [[ "$select_ans" == "2" ]]; then
				launchercreator "linux"; fi
		elif [[ "$select_ans" == "2" ]]; then
			readfiles "Launchers|sort" "$TEMPPATH/.launcherslist"; launchereditor "$read_result_dir"
		elif [[ "$select_ans" == "3" ]]; then
			readfiles "Launchers|sort" "$TEMPPATH/.launcherslist"
			if [[ -L "$LAUNCHPATH/$read_result_dir}" && $(readlink -f "$LAUNCHPATH/$read_result_dir") ]]; then
				rm "$(readlink -f "$LAUNCHPATH/$read_result_dir")"; fi
			rm "$LAUNCHPATH/$read_result_dir"
		elif [[ "$select_ans" == "4" ]]; then
			readfiles "Launchers|sort" "$TEMPPATH/.launcherslist"; xdg-open "$LAUNCHPATH/$read_result_dir"
		elif [[ "$select_ans" == "5" ]]; then
			readfiles "Launchers|sort" "$TEMPPATH/.launcherslist"; eval "\"$LAUNCHPATH/$read_result_dir\""; fi
;;
"2") #Wine Helper
	listoptions "Wine Utilities" "Prefix commands|Winetricks|Dxvk|Vkd3d|Install MF|Install MF-Cab|Install mfplat.dll|Prefixes manager|Runners manager|Reset default prefix"
	if [[ "$select_ans" == "1" ]]; then
		prefixinit; prefixcommands	"all"
	elif [[ "$select_ans" == "2" ]]; then
		prefixinit; runnerinit "all"
		generalinput "winetricks ___ --gui" "${cyc}winetricks arguments${noc} (Example: ${cyc}vcrun2019${noc})"
		eval "WINEPREFIX=\"$selected_prefix\" WINE=\"$selected_runner\" winetricks $input_ans"
	elif [[ "$select_ans" == "3" ]]; then
		if [[ -d "$PACKPATH/dxvk" ]]; then
			listoptions "Options List" "Install|Uninstall"
			if [[ "$select_ans" == "1" ]]; then update_option="install"
			elif [[ "$select_ans" == "2" ]]; then update_option="uninstall"; fi
			prefixinit; runnerinit "all"
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/dxvk/dlls/dxvk-master/setup_dxvk.sh\" $update_option"
		else echo -e "\nInstall ${grc}Dxvk${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ "$select_ans" == "4" ]]; then
		if [[ -d "$PACKPATH/vkd3d-proton" ]]; then
			listoptions "Options List" "Install|Uninstall"
			if [[ "$select_ans" == "1" ]]; then update_option="install"
			elif [[ "$select_ans" == "2" ]]; then update_option="uninstall"; fi
			prefixinit; runnerinit "all"
			if [[ ! -f "$selected_prefix/drive_c/windows/system32/d3d12.dll" ]]; then touch "$selected_prefix/drive_c/windows/system32/d3d12.dll"
			elif [[ ! -f "$selected_prefix/drive_c/windows/syswow64/d3d12.dll" ]]; then touch "$selected_prefix/drive_c/windows/syswow64/d3d12.dll"; fi
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/vkd3d-proton/dlls/vkd3d-proton-master/setup_vkd3d_proton.sh\" $update_option"
		else echo -e "\nInstall ${grc}Vkd3d${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ "$select_ans" == "5" ]]; then
		if [[ -d "$PACKPATH/mf-install" ]]; then
			prefixinit; runnerinit "all"
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/mf-install/mf-install.sh\""
		else echo -e "\nInstall ${grc}MF${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ "$select_ans" == "6" ]]; then
		if [[ -d "$PACKPATH/mf-installcab" ]]; then
			prefixinit;runnerinit "all"
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/mf-installcab/install-mf-64.sh\""
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ "$select_ans" == "7" ]]; then
		if [[ -d "$PACKPATH/mf-installcab" ]]; then execinit "wine"; cp "$PACKPATH/mf-installcab/mfplat.dll" "$init_result_dir"
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ $select_ans == "8"  ]]; then
		listoptions "Lists Manager" "Add prefix|Create prefix|Delete prefix"
		if [[ "$select_ans" == "1" ]]; then addlines "prefix" "$HIPATH/addpfx.cfg"
		elif [[ "$select_ans" == "2" ]]; then prefixcreator "all"
		elif [[ "$select_ans" == "3" ]]; then deletelines "Prefixes" "$HIPATH/addpfx.cfg" "none"; fi
	elif [[ $select_ans == "9"  ]]; then
		listoptions "Lists Manager" "Add runner|Delete runner"
		if [[ "$select_ans" == "1" ]]; then addlines "runner" "$HIPATH/addrun.cfg"
		elif [[ "$select_ans" == "2" ]]; then deletelines "Runners" "$HIPATH/addrun.cfg" "none"; fi
	elif [[ $select_ans == "10"  ]]; then
		listoptions "Are you sure?" "Yes|No"
		if [[ "$select_ans" == "1" ]]; then
			rm -rf "$HOME/.wine"; mkdir "$HOME/.wine"
			eval "WINEPREFIX=\"$HOME/.wine\" wine wineboot -u"; fi; fi
;;
"3") #Steam Helper
	listoptions "Steam Helper" "Set game launch options|Game prefix commands|Winetricks|Reset game prefix|Install MF|Install MFCab|Install mfplat.dll"
	if [[ $select_ans == "1" ]]; then steamlauchoptions
	elif [[ $select_ans == "2" ]]; then
		readfiles "Steam game prefixes|sort" "$TEMPPATH/.steampfx"; selected_prefix="$read_result_dir"; prefixcommands "proton"
	elif [[ $select_ans == "3" ]]; then
		readfiles "Steam game prefixes|sort" "$TEMPPATH/.steampfx"; selected_prefix="$read_result_dir"; runnerinit "proton"
		generalinput "winetricks ___ --gui" "${cyc}winetricks arguments${noc}"
		eval "WINEPREFIX=\"$selected_prefix\" WINE=\"$selected_runner\" winetricks $input_ans"
	elif [[ $select_ans == "4" ]]; then deletelines "Steam game prefixes" "$TEMPPATH/.steamgamecompat" "none"
	#elif [[ $select_ans == "5" ]]; then deletelines "Steam game prefixes" "$TEMPPATH/.steampfx" "force"; prefixcreator "proton"
	elif [[ $select_ans == "5" ]]; then
		if [[ -d "$PACKPATH/mf-install" ]]; then
			readfiles "Steam game prefixes|sort" "$TEMPPATH/.steampfx"; selected_prefix="$read_result_dir"; runnerinit "proton"
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/mf-install/mf-install.sh\""
		else echo -e "\nInstall ${grc}MF${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ $select_ans == "6" ]]; then
		if [[ -d "$PACKPATH/mf-installcab" ]]; then
			readfiles "Steam game prefixes|sort" "$TEMPPATH/.steampfx"; selected_prefix="$read_result_dir"; runnerinit "proton"
			eval "WINEPREFIX=\"$selected_prefix\" PATH=\"$selected_runner_path:\$PATH\" WINELOADER=\"$selected_runner\" \"$PACKPATH/mf-installcab/install-mf-64.sh\""
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Packages Installer${noc}!"; fi
	elif [[ "$select_ans" == "7" ]]; then
		if [[ -d "$PACKPATH/mf-installcab" ]]; then
			readfiles "Steam games|sort" "$TEMPPATH/.steamdirs"
			find "$read_result_dir" -name "*.exe" | while read -r line; do echo -e "$(basename -s .exe "$line") | $line" >> "$TEMPPATH/.steamexes"; done
			readfiles "Exe files|sort" "$TEMPPATH/.steamexes"
			cp "$PACKPATH/mf-installcab/mfplat.dll" "$(dirname "$read_result_dir")"
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Packages Installer${noc}!"; fi; fi

;;
"4") #Packages Installer
	if [[ -f "/usr/bin/git" ]]; then packsinstaller
	else echo -e "\n ${grc}Git ${mac}must be installed!${noc}"; fi
;;
"5") #Arch Updater
	if [[ "$osversion" == "ArchLinux" ]]; then
		if [[ -f "/usr/bin/yay" && -f "/usr/bin/checkupdates" ]]; then
			listoptions "Use '--devel' option?" "Yes|No"
			if [[ "$select_ans" == "1" ]]; then
				list_command="$(checkupdates; yay -Qua --devel)"
				update_command="sudo pacman -Syu; yay -Syua --devel"
			else list_command="$(checkupdates; yay -Qua)"; update_command="sudo pacman -Syu; yay -Syua"; fi
			if [[ -n "$list_command" ]]; then
				echo -e "\n ${mac}Updates:${noc}\n\n${list_command}"
				listoptions "Update?" "Yes|No"
				if [[ "$select_ans" == "1" ]]; then eval "$update_command"; fi
			else echo -e "\n ${mac}No updates found${noc}"; fi
		else echo -e "\n ${grc}Yay${noc} or ${grc}checkupdates${noc} ${mac}not installed!${noc}\n"; fi
	else echo -e "\n ${mac}Wrong ${grc}OS${mac}!${noc}\n"; fi
esac

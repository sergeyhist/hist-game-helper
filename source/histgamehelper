#!/bin/bash
inputhistory() {
	history -r "$1"
	if [[ -z "$4" ]]; then echo -e "\nEnter ${2} (${cyc}q|Q${noc} for exit):"
	else echo -e "\nEnter ${2} (Default: ${grc}${4}${noc}) (${cyc}d|D${noc} for ${grc}default${noc}, ${cyc}q|Q${noc} for ${grc}exit${noc}):"; fi; read -e "input_ans" 
	if [[ -n "$input_ans" && "$input_ans" != [qQйЙdDвВ] ]]; then
	flg=0; while (( flg == 0 )); do listcount=0; flg=1; if [[ ! -f "$1" ]]; then touch "$1"; fi
	while read LINE; do let "listcount += 1"; if [[ "$LINE" = "$input_ans" ]]; then flg=0; sed -i ${listcount}d $1; break; fi
	done < "$1"; done; echo "$input_ans" >> "$1"; history -c; else 
		if [[ "$input_ans" == [qQйЙ] ]]; then if [[ "$3" == "exit" ]]; then exit; fi
		elif [[ "$input_ans" == [dDвВ] ]]; then input_ans="$4"
		else inputhistory "$1" "$2" "$3" "$4"; fi; fi
}

addlines() {
	if [[ "$2" == "dir" ]]; then inputhistory "$HISTORYPATH/.${6}" "${cyc}path${noc} to the ${grc}$1${noc} folder" "exit"; line_path="$input_ans"
	elif [[ "$2" == "com" ]]; then inputhistory "$HISTORYPATH/.${2}" "${cyc}$1${noc}" "exit"; line_com="$input_ans"; fi
	if [[ "$3" == "name" ]]; then inputhistory "$HISTORYPATH/.${6}${3}" "${cyc}name${noc} of the ${grc}$1${noc}" "exit"; line_name="$input_ans"; fi
	if [[ "$4" == "tofile" ]] && [[ "$2" == "dir" ]]; then if [[ ! -d "$line_path" ]]; then mkdir -p "$line_path"; fi
		if [[ -n "$line_name" ]]; then echo -e "$line_name\n$line_path" >> "$5"; else echo -e "$line_path" >> "$5"; fi
	elif [[ "$4" == "tofile" ]] && [[ "$2" == "com" ]]; then
		if [[ -n "$line_name" ]]; then echo -e "$line_name\n$line_com" >> "$5"; else echo -e "$line_com" >> "$5"; fi; fi
}

deletelines() {
	readfiles "$1" "$2" "$3" "ans"
	if [[ "$3" == "lines" ]]; then sed -i $((file_line_number*2-1)),$((file_line_number*2))d "$2"
	elif [[ "$3" == "line" ]]; then sed -i ${file_line_number}d "$2"; fi
	if [[ "$1" == "Git Packages" ]]; then if [[ -f "$CONFPATH/gitcomlist.cfg" ]]; then sed -i $((file_line_number*2-1)),$((file_line_number*2))d "$CONFPATH/gitcomlist.cfg"; fi; fi
	if [[ -d "$file_line_dir" && "$1" != "Commands" ]]; then 
		if [[ "$4" != "delete" ]]; then echo -e "\nDelete ${cyc}folder${noc} from filesystem? ${cyc}y|N${noc}"; read -e "ans"; else ans="y"; fi
		if [[ "$ans" = [yY]* ]]; then if [[ "$5" != "steam" ]]; then rm -rf "$file_line_dir"; else rm -rf "$(dirname "$file_line_dir")"; fi; fi; fi
	if [[ ! -s "$2" ]]; then rm "$2"; fi
}

readfiles() {
	if [[ -f "$2" ]]; then
		listcount=0; file_line_number=0; if [[ $3 == "lines" ]]; then if [[ "$4" == "ans" ]]; then echo -e "\n ${mac}$1:${noc}\n"
			while read line; do let "listcount += 1"; let "line_number = listcount / 2"; if ((listcount%2 != 0)); then 
				file_name=$line; else file_dir=$line; echo -e " ${cyc}$line_number${noc} - ${grc}$file_name${noc} - ${blc}$file_dir${noc}"; fi; done < $2
			echo -e "\nChoose ${cyc}item${noc} from the ${grc}list${noc} above (${cyc}q|Q${noc} for ${grc}exit${noc}):"; read -e "ans"
			for ((i=1;i<=line_number;i++)); do if (( i == ans )); then file_line_name=$(sed -n $((i*2-1))p $2); file_line_dir=$(sed -n $((i*2))p $2); file_line_number=$ans; fi; done
		else file_line_name=$(sed -n $(($4*2-1))p $2); file_line_dir=$(sed -n $(($4*2))p $2); file_line_number=$4; fi; fi
		if [[ $3 == "line" ]]; then if [[ "$4" == "ans" ]]; then echo -e "\n ${mac}$1:${noc}\n"
			while read line; do let "listcount += 1"; file_dir=$line; echo -e " ${cyc}$listcount${noc} - ${grc}$(basename -s .$5 "$file_dir")${noc} - ${blc}$file_dir${noc}"; done < $2
			echo -e "\nChoose ${cyc}item${noc} from the ${grc}list${noc} above (${cyc}q|Q${noc} for ${grc}exit${noc}):"; read -e "ans"
			for ((i=1;i<=listcount;i++)); do if (( i == ans )); then file_line_dir=$(sed -n ${ans}p $2); file_line_number=$ans; fi; done
		else file_line_dir=$(sed -n ${4}p $2); file_line_number=$4; fi; fi; if [[ -n "$line_number" ]]; then l_count=$((line_number+1)); else l_count=$((listcount+1)); fi
		if [[ "$ans" == [qQйЙ] ]]; then exit
		elif [[ "$ans" -ge "$l_count" || "$ans" -le "0" ]]; then readfiles "$1" "$2" "$3" "$4" "$5"; fi
	else echo -e "\n${grc}List${noc} is ${rec}empty${noc}"; exit; fi
}

generalinit() {
	readfiles "${1}" "$TEMPPATH/.${2}" "lines" "ans"; init_result="$file_line_dir"; init_result_name="$file_line_name"
}

runnerinit() {
	if [[ $1 == "steam" ]]; then exec_ver="proton"
	else exec_ver="$1"; fi
	finder "$exec_ver" "file" "$TEMPPATH/.${exec_ver}run"; readfiles "Runners" "$TEMPPATH/.runners" "lines" "ans"; init_result="$file_line_dir"
	if [[ $exec_ver == "proton" && $2 == "original" ]]; then
		if [[ $(find "$(dirname "$file_line_dir")" -type f,l -name "wine") ]]; then
			init_result=$(find "$(dirname "$file_line_dir")" -type f,l -name "wine")
		else
			if [[ $(find "$(dirname "$file_line_dir")" -type f,l -name "proton_dist.tar") ]]; then
				proton_tar=$(find "$(dirname "$file_line_dir")" -type f,l -name "proton_dist.tar"); cd "$(dirname "$proton_tar")"
				tar -xf "$proton_tar"; init_result=$(find "$(dirname "$file_line_dir")" -type f,l -name "wine"); rm -f "$proton_tar"
			else init_result="/usr/bin/wine"; fi; fi; fi
}

pfxinit() {
	readfiles "Prefixes" "$TEMPPATH/.${3}${1}pfx" "lines" "ans"; init_result="$file_line_dir"
	if [[ $1 == "proton" && $2 == "original" ]]; then init_result="$file_line_dir/pfx"; fi
}

execinit() {
	if [[ $1 == "steam" ]]; then exec_ver="proton"
	else exec_ver="$1"; fi
	addlines "${exec_ver^} App" "dir" "" "" "" "${exec_ver}app"
	finder "$exec_ver" "path" "$line_path" ; readfiles "${exec_ver^} Executables" "$TEMPPATH/.${exec_ver}files" "lines" "ans"
	init_result_name="$file_line_name"; init_result_dir=$(dirname "$file_line_dir"); init_result="$file_line_dir"
}

pfxcreator() {
	addlines "${1^} Prefix" dir name tofile "$CONFPATH/add${1}pfx.cfg" "${1}pfx"; pfx_path=$line_path; pfx_name=$line_name; pfx_runner=$2
	if [[ ! -d "${pfx_path}/drive_c" ]]; then 
		if [[ $1 == "proton" && ! -d "$pfx_path/pfx" ]]; then mkdir "$pfx_path/pfx"; pfx_path="$pfx_path/pfx"; fi
		if [[ -z "$pfx_runner" ]]; then runnerinit "$1" "original"; pfx_runner="$init_result"; fi
		listoptions "Prefix Version" "32bit|64bit"
		if [[ "$select_ans" == "1" ]]; then
			WINEARCH=win32 WINEPREFIX="$pfx_path" "$pfx_runner" wineboot -u;
		elif [[ "$select_ans" == "2" ]]; then
			WINEPREFIX="$pfx_path" "$pfx_runner" wineboot -u; fi; fi
}

steamlauchoptions() {
	if [[ "$video_driver" == *"NVIDIA"* ]]; then sl_video="${nvidia_to}${nvidia_osd}"
	elif [[ "$video_driver" == *"AMD"* ]]; then sl_video="${amd_aco}${amd_to}"; fi
	sl_vars="${proton_wined3d}${proton_large_address}${proton_old_gl}${proton_seccomp}${proton_d3d12}${proton_d3d11}${proton_d3d10}${proton_d3d9}${proton_esync}${proton_fsync}${proton_futex2}${sl_video}${dxvk_async}${dxvk_cache}${dxvkhud_status}${dxvkhud_full}${dxvkhud_devinfo}${dxvkhud_fps}${dxvkhud_frametimes}${dxvkhud_submission}${dxvkhud_drawcall}${dxvkhud_pipelines}${dxvkhud_memory}${dxvkhud_gpuload}${dxvkhud_version}${dxvkhud_api}${dxvkhud_compiler}${dxvkhud_samplers}${dxvkhud_scale}${strangle_status}${strangle_fps}${strangle_fps_battery}${strangle_vsync}${strangle_glfinish}${strangle_picmip}${strangle_af}${strangle_trilinear}${strangle_retro}${strangle_nodlsym}${strangle_vkonly}${strangle_enable_vklayer}${strangle_disable_vklayer}${main_pulse}${main_gamemode}${main_mangohud}${main_vkbasalt}${main_customoptions}"
	line_number=0; pkill steam; sleep 3s
	while read line; do 
		let "line_number+=1"
		if [[ $line == *'"Software"'* ]]; then flag=1; fi 
		if [[ $flag == 1 && $line == *"Apps"* ]]; then flag=0
			sed -i "$((line_number+2))i\ \t\t\t\t\t\"$2\"\n\t\t\t\t\t{\n\t\t\t\t\t\t\"LaunchOptions\" \t\"${sl_vars}%command% ${main_args}\"\n\t\t\t\t\t}" $1; fi;  done < "$1" 	
}

launchercreator() {
	if [[ $1 != "steam" ]]; then
		if [[ $1 == "proton" || $1 == "wine" ]]; then runnerinit "$1"; launcher_runner="$init_result"; pfxinit "$1" "" "launcher"; launcher_prefix="$init_result"
			if [[ $launcher_prefix == "Add new prefix to the list" ]]; then pfxcreator "$1" "$launcher_runner"; launcher_prefix="$pfx_path"; launcher_name=$pfx_name; fi; fi
		execinit "$1"; if [[ -z "$launcher_name" ]]; then launcher_name=$init_result_name; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"; fi
	else
		generalinit "${1^} Apps" "${1}apps"; launcher_name="$init_result_name"; launcher_steam_appid="$init_result"
		if [[ -n "$launcher_steam_appid" ]]; then
			finder "localconfig" "path" "$HOME/.steam/steam/userdata/"; generalinit "Steam Profiles" "localconfigfiles"; launcher_lc="$init_result"; fi; fi
	inputhistory "$HISTORYPATH/.launchername" "${cyc}name${noc} of the launcher" "exit" "$launcher_name"; launcher_name="$input_ans"; launchersetup "${launcher_name}" "$1" 
	if [[ $1 == "steam" ]]; then steamlauchoptions "$launcher_lc" "$launcher_steam_appid"; fi; launchercompleteinit "$1" "$launcher_name"
	if [[ -f "$LAUNCHPATH/${launcher_name}-$1" ]]; then chmod +x "$LAUNCHPATH/${launcher_name}-$1"; echo -e "\nLauncher ${grc}${launcher_name}-$1${noc} successfully created in the ${grc}$LAUNCHPATH${noc} folder!"; fi
}

pfxcommands() {
	pfxinit "$1" "original"; command_prefix="$init_result"; generalinit "Prefix Functions" "functions"; command_func="$init_result"
	if [[ "$command_func" == "wineserver -k" || "$command_func" == "wineserver -k9" ]]; then  WINEPREFIX="$command_prefix" $command_func
	elif [[ "$command_func" == "Select this for input custom prefix command" ]]; then
		runnerinit "$1" "original"; command_runner="$init_result"
		inputhistory "$HISTORYPATH/.prefixcommand" "${grc}custom prefix command${noc} (Example: ${cyc}notepad.exe${noc})" "exit"; command_func="$input_ans"
		WINEPREFIX="$command_prefix" "$command_runner" $command_func; echo -e "\n${cyc}Output${noc} in ${grc}$LOGSPATH/mainoutput.log${noc}"
	else runnerinit "$1" "original"; command_runner="$init_result"; WINEPREFIX="$command_prefix" "$command_runner" $command_func; fi
}

toolsupdater() {
	cd  $TOOLSPATH; name=$(basename -s .git "$1")
	listoptions "Options" "Install ${blc} - Check \"${cyc}$1${blc}\" for additional information or necessary dependencies${noc}|Update|Uninstall"
	if [[ "$select_ans" == "1" ]]; then if [[ -d "$name" ]]; then rm -rf "$name"; fi; git clone $2 "$1"; cd "$name"; tup_build="1"
	elif [[ "$select_ans" == "2" ]]; then cd "$name"; git fetch; git remote update && git status -uno | grep -q 'Your branch is behind' && tup_update_check="1"
		if [[ "$tup_update_check" == "1" ]]; then git reset --hard; git pull; tup_build="1"; else echo -e "\nAlready ${grc}up to date${noc}!"; fi; fi
	if [[ "$tup_build" == "1" ]]; then
		if [[ "$name" != "mf-install" && "$name" != "mf-installcab" ]]; then
			if [[ $name == "dxvk" || $name == "vkd3d-proton" ]]; then if [[ -d "dlls" ]]; then rm -rf dlls; fi; ./package-release.sh master dlls --no-package
			elif [[ $name == "MangoHud" ]]; then ./build.sh build; ./build.sh package; ./build.sh install
			elif [[ $name == "gamemode" ]]; then git checkout 1.6.1; ./bootstrap.sh
			elif [[ $name == "vkBasalt" ]]; then meson --buildtype=release --prefix=/usr builddir; ninja -C builddir install
			elif [[ $name == "libstrangle" ]]; then make; sudo make install; fi; fi; fi
	if [[ "$select_ans" == "3" ]]; then
		cd "$name"
		if [[ $name == "MangoHud" ]]; then ./build.sh uninstall
		elif [[ $name == "gamemode" ]]; then systemctl --user stop gamemoded.service; sudo ninja uninstall -C builddir
		elif [[ $name == "vkBasalt" ]]; then sudo ninja -C builddir uninstall
		elif [[ $name == "libstrangle" ]]; then sudo make uninstall; fi
		cd ..; rm -rf "$name"; fi
}

finder() {
	if [[ $2 == "path" ]]; then
	case $1 in
	"linux")
	find "$3" -type f -executable | while read line; do fake_name=$(basename "$line"); echo -e "$fake_name\n$line" >> "$TEMPPATH/.${1}files"; done
	;;
	"wine"|"proton")
	find "$3" -name "*.exe" | while read line; do fake_name=$(basename -s .exe "$line"); echo -e "$fake_name\n$line" >> "$TEMPPATH/.${1}files"; done
	;;
	"localconfig")
	find "$3" -name "localconfig.vdf" | while read line; do
		steam_profile_name=$(grep '"PersonaName"' "$line" | cut -d\" -f4)
		echo -e "${steam_profile_name}\n${line}" >> "$TEMPPATH/.${1}files"; done
	esac
	files_count=$(($(< "$TEMPPATH/.${1}files" wc -l)/2))
	elif [[ $2 == "file" ]]; then
	case $1 in
	"proton")
	while read line; do find "$line" -type f,l -name "$1" | while read line; do fake_dir=$(dirname "$line"); echo -e "$(while read line; do echo -e ${line##* }; done < "$fake_dir/version")\n$line" >> "$TEMPPATH/.runners"; done; done < "$3"
	;;
	"wine")
	while read line; do find "$line" -type f,l -name "$1" | while read line; do fake_name=$("$line" --version); echo -e "$fake_name\n$line" >> "$TEMPPATH/.runners"; done; done < "$3"
	esac; fi
}

listoptions() {
	IFS="|"; lo_count=0; sa_count=0; echo -e "\n ${mac}$1:${noc}\n"
	for item in $4; do
		status_array[$sa_count]="$item"; let "sa_count+=1"; done
	for option in $2; do 
		if [[ -n "$4" && -n "${!status_array[lo_count]}" ]]; then status_check=" - ${grc}ON${noc}${cyc} ( ${!status_array[lo_count]})${noc}"
		elif [[ -n "$4" ]]; then status_check=" - ${rec}OFF${noc}"; else status_check=""; fi; if [[ "$option" == "Reset Options" ]]; then status_check=""; fi
		list_array[$lo_count]="$option"; echo -e " ${cyc}$((lo_count+=1))${noc} - ${grc}$option${noc}${status_check}"; done
	echo -e "\nChoose ${cyc}Option${noc} from the list above (${cyc}q|Q${noc} for ${grc}exit${noc}):"; read -e "select_ans"; IFS="$Def_IFS"; let "lo_count+=1"
	if [[ "$select_ans" == [qQйЙ] ]]; then if [[ -z "$3" ]]; then exit; fi
	elif [[ "$select_ans" -ge "$lo_count" || "$select_ans" -le "0" ]]; then listoptions "$1" "$2" "$3" "$4" "$5"
	else if [[ -n "$3" ]]; then ${3}selector "${list_array[select_ans-1]}" "$5"; listoptions "$1" "$2" "$3" "$4" "$5"; fi; fi; 
}

launchercompleteinit() {
	launchersetupinit "$1"
	launcher_main='${main_pulse}${main_gamemode}${main_mangohud}${main_vkbasalt}${main_customoptions}'
	launcher_strangle='${strangle_status}${strangle_fps}${strangle_fps_battery}${strangle_vsync}${strangle_glfinish}${strangle_picmip}${strangle_af}${strangle_trilinear}${strangle_retro}${strangle_nodlsym}${strangle_vkonly}${strangle_enable_vklayer}${strangle_disable_vklayer}'
	launcher_dxvkhud='${dxvkhud_status}${dxvkhud_full}${dxvkhud_devinfo}${dxvkhud_fps}${dxvkhud_frametimes}${dxvkhud_submission}${dxvkhud_drawcall}${dxvkhud_pipelines}${dxvkhud_memory}${dxvkhud_gpuload}${dxvkhud_version}${dxvkhud_api}${dxvkhud_compiler}${dxvkhud_samplers}${dxvkhud_scale}'
	launcher_dxvk='${dxvk_async}${dxvk_cache}'
	if [[ "$video_driver" == *"NVIDIA"* ]]; then launcher_video='${nvidia_to}${nvidia_osd}'
	elif [[ "$video_driver" == *"AMD"* ]]; then launcher_video='${amd_aco}${amd_to}'; fi
	launcher_wine='${wine_esync}${wine_fsync}'
	launcher_proton='${proton_wined3d}${proton_large_address}${proton_old_gl}${proton_seccomp}${proton_d3d12}${proton_d3d11}${proton_d3d10}${proton_d3d9}${proton_esync}${proton_fsync}${proton_futex2}'
	launcher_command=''
	if [[ "$1" == "wine" ]]; then
		launcher_vars=" launcher_exec_dir=\"$launcher_exec_dir\"\n launcher_runner=\"$launcher_runner\"\n launcher_prefix=\"$launcher_prefix\"\n launcher_exec=\"$launcher_exec\"\n"
	elif [[ "$1" == "proton" ]]; then
		launcher_vars=" launcher_exec_dir=\"$launcher_exec_dir\"\n launcher_runner=\"$launcher_runner\"\n launcher_prefix=\"$launcher_prefix\"\n launcher_exec=\"$launcher_exec\"\n"
	elif [[ "$1" == "linux" ]]; then
		launcher_vars=" launcher_exec_dir=\"$launcher_exec_dir\"\n launcher_exec=\"'$launcher_exec'\"\n"
	elif [[ "$1" == "steam" ]]; then
		launcher_vars=" launcher_steam_appid=\"$launcher_steam_appid\"\n"; fi
	if [[ "$1" == "wine" ]]; then 
		launcher_command="${launcher_command}${launcher_dxvkhud} ${launcher_video}${launcher_dxvk}${launcher_strangle}${launcher_wine}${launcher_main}"
		launcher_command="${launcher_command} WINEPREFIX=\\\"\${launcher_prefix}\\\" \\\"\${launcher_runner}\\\" \${wine_vd} \\\"\${launcher_exec}\\\" \${main_args}"
	elif [[ "$1" == "proton" ]]; then
		launcher_command="${launcher_command}${launcher_dxvkhud} ${launcher_video}${launcher_dxvk}${launcher_strangle}${launcher_proton}${launcher_main}"
		launcher_command="${launcher_command} STEAM_COMPAT_DATA_PATH=\\\"\${launcher_prefix}\\\" \\\"\${launcher_runner}\\\" run \\\"\${launcher_exec}\\\" \${main_args}"
	elif [[ "$1" == "linux" ]]; then
		launcher_command="${launcher_command}${launcher_video}${launcher_strangle}${launcher_main}"
		launcher_command="${launcher_command} \${launcher_exec} \${main_args}"
	elif [[ "$1" == "steam" ]]; then launcher_command="${launcher_command} steam -applaunch \$launcher_steam_appid -silent"; fi
	echo -e '#!/bin/bash'"\n${launcher_vars}${launcher_settings}"'if [[ $1 != "read_vars" ]]; then cd "${launcher_exec_dir}"; eval '"\"${launcher_command}\"; fi" > "$LAUNCHPATH/$2-$1"
}

launchereditor () {
	readfiles "Launchers" "$TEMPPATH/.launchers" "line" "ans"
	launcher_name_full="$(basename "$file_line_dir")"; launcher_path="$file_line_dir"; source "$launcher_path" "read_vars"
	launcher_name="$(echo "${launcher_name_full%%-*}")"; launcher_type="$(echo "${launcher_name_full##*-}")"
	if [[ "$launcher_type" == "wine" || "$launcher_type" == "proton" ]]; then
		listoptions "Launcher Setup" "Change Launch Options|Change Prefix|Change Runner|Change Executable"
		if [[ "$select_ans" == "1" ]]; then launchersetup "$launcher_name" "$launcher_type"
		elif [[ "$select_ans" == "2" ]]; then pfxinit "$launcher_type"; launcher_prefix="$init_result" 
		elif [[ "$select_ans" == "3" ]]; then runnerinit "$launcher_type"; launcher_runner="$init_result"
		elif [[ "$select_ans" == "4" ]]; then execinit "$launcher_type"; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"; fi
	elif [[ "$launcher_type" == "linux" ]]; then
		listoptions "Launcher Setup" "Change Launch Options|Change Executable"
		if [[ "$select_ans" == "1" ]]; then launchersetup "$launcher_name" "$launcher_type"
		elif [[ "$select_ans" == "2" ]]; then execinit "$launcher_type"; launcher_exec_dir="$init_result_dir"; launcher_exec="$init_result"; fi
	elif [[ "$launcher_type" == "steam" ]]; then
		listoptions "Launcher Setup" "Change Launch Options|Change Steam App"
		if [[ "$select_ans" == "1" ]]; then
			finder "localconfig" "path" "$HOME/.steam/steam/userdata/"; generalinit "Steam Profiles" "localconfigfiles"; launcher_lc="$init_result"
			launchersetup "$launcher_name" "$launcher_type"; steamlauchoptions "$launcher_lc" "$launcher_steam_appid"			
		elif [[ "$select_ans" == "2" ]]; then generalinit "Steam Apps" "steamapps"; launcher_steam_appid="$init_result" ; fi; fi
	launchercompleteinit "$launcher_type" "$launcher_name"
}

launchersetup() {
	if [[ -f "/usr/bin/strangle" || -f "/usr/local/bin/strangle" ]]; then settings_strangle="|Libstrangle Options"
	else strangle_fps=""; strangle_fps_battery=""; strangle_vsync=""; strangle_glfinish=""; strangle_picmip=""; strangle_af=""; strangle_trilinear=""; strangle_retro=""
		strangle_nodlsym=""; strangle_vkonly=""; strangle_enable_vklayer=""; strangle_disable_vklayer=""; strangle_status=""; fi
	if [[ -f "/usr/bin/gamemoderun" ]]; then settings_gamemode="|Enable Gamemode"; settings_gamemode_init="|main_gamemode"; else main_gamemode=""; fi
	if [[ -f "/usr/bin/mangohud" ]]; then settings_mangohud="|Enable MangoHud"; settings_mangohud_init="|main_mangohud"; else main_mangohud=""; fi
	if [[ -f "/usr/bin/gamemoderun" ]]; then settings_vkbasalt="|Enable vkBasalt"; settings_vkbasalt_init="|main_vkbasalt"; else main_vkbasalt=""; fi
	if [[ "$video_driver" == *"NVIDIA"* ]]; then launcher_video_driver="NVIDIA Options"
	elif [[ "$video_driver" == *"AMD"* ]]; then launcher_video_driver="AMD Options"; fi
	if [[ "$2" == "wine" ]]; then listoptions "Launcher Setup" "Main Options${settings_strangle}|Wine Options|DxvkHUD Options|Dxvk Options|${launcher_video_driver}" "settings" "" "$1"
	elif [[ "$2" == "proton" ]]; then listoptions "Launcher Setup" "Main Options${settings_strangle}|Proton Options|DxvkHUD Options|Dxvk Options|${launcher_video_driver}" "settings" "" "$1"
	elif [[ "$2" == "linux" ]]; then listoptions "Launcher Setup" "Main Options${settings_strangle}|${launcher_video_driver}" "settings" "" "$1"
	elif [[ "$2" == "steam" ]]; then listoptions "Launcher Setup" "Main Options${settings_strangle}|Proton Options|DxvkHUD Options|Dxvk Options|${launcher_video_driver}" "settings" "" "$1"; fi
}

launchersetupinit() {
	launcher_main_init=" main_args=\"$main_args\"\n main_customoptions=\"$main_customoptions\"\n main_pulse=\"$main_pulse\"\n main_gamemode=\"$main_gamemode\"\n main_mangohud=\"$main_mangohud\"\n main_vkbasalt=\"$main_vkbasalt\"\n"
	launcher_strangle_init=" strangle_status=\"$strangle_status\"\n strangle_fps=\"$strangle_fps\"\n strangle_fps_battery=\"$strangle_fps_battery\"\n strangle_vsync=\"$strangle_vsync\"\n strangle_glfinish=\"$strangle_glfinish\"\n strangle_picmip=\"$strangle_picmip\"\n strangle_af=\"$strangle_af\"\n strangle_trilinear=\"$strangle_trilinear\"\n strangle_retro=\"$strangle_retro\"\n strangle_nodlsym=\"$strangle_nodlsym\"\n strangle_vkonly=\"$strangle_vkonly\"\n strangle_enable_vklayer=\"$strangle_enable_vklayer\"\n strangle_disable_vklayer=\"$strangle_disable_vklayer\"\n"
	if [[ "$1" != "linux" ]]; then launcher_dxvkhud_init=" dxvkhud_status=\"$dxvkhud_status\"\n dxvkhud_full=\"$dxvkhud_full\"\n dxvkhud_devinfo=\"$dxvkhud_devinfo\"\n dxvkhud_fps=\"$dxvkhud_fps\"\n dxvkhud_frametimes=\"$dxvkhud_frametimes\"\n dxvkhud_submission=\"$dxvkhud_submission\"\n dxvkhud_drawcall=\"$dxvkhud_drawcall\"\n dxvkhud_pipelines=\"$dxvkhud_pipelines\"\n dxvkhud_memory=\"$dxvkhud_memory\"\n dxvkhud_gpuload=\"$dxvkhud_gpuload\"\n dxvkhud_version=\"$dxvkhud_version\"\n dxvkhud_api=\"$dxvkhud_api\"\n dxvkhud_compiler=\"$dxvkhud_compiler\"\n dxvkhud_samplers=\"$dxvkhud_samplers\"\n dxvkhud_scale=\"$dxvkhud_scale\"\n"; fi
	if [[ "$1" != "linux" ]]; then launcher_dxvk_init=" dxvk_async=\"$dxvk_async\"\n dxvk_cache=\"$dxvk_cache\"\n"; fi
	if [[ "$video_driver" == *"NVIDIA"* ]]; then launcher_nvidia_init=" nvidia_to=\"$nvidia_to\"\n nvidia_osd=\"$nvidia_osd\"\n"; fi
	if [[ "$video_driver" == *"AMD"* ]]; then launcher_amd_init=" amd_aco=\"$amd_aco\"\n amd_to=\"$amd_to\"\n"; fi
	if [[ "$1" == "wine" ]]; then launcher_wine_init=" wine_esync=\"$wine_esync\"\n wine_fsync=\"$wine_fsync\"\n wine_vd=\"$wine_vd\"\n"; fi
	if [[ "$1" == "proton" || "$1" == "steam" ]]; then launcher_proton_init=" proton_wined3d=\"$proton_wined3d\"\n proton_large_address=\"$proton_large_address\"\n proton_old_gl=\"$proton_old_gl\"\n proton_seccomp=\"$proton_seccomp\"\n proton_d3d12=\"$proton_d3d12\"\n proton_d3d11=\"$proton_d3d11\"\n proton_d3d10=\"$proton_d3d10\"\n proton_d3d9=\"$proton_d3d9\"\n proton_esync=\"$proton_esync\"\n proton_fsync=\"$proton_fsync\"\n proton_futex2=\"$proton_futex2\"\n"; fi
	launcher_settings="${launcher_main_init}${launcher_strangle_init}${launcher_dxvkhud_init}${launcher_dxvk_init}${launcher_nvidia_init}${launcher_amd_init}${launcher_wine_init}${launcher_proton_init}"
}

settingsselector() {
	if [[ "$1" == "Main Options" ]]; then listoptions "$1" "Add Additional Arguments|Add Custom Options|Enable Pulse Audio Latency${settings_gamemode}${settings_mangohud}${settings_vkbasalt}|Reset Options" "main" "main_args|main_customoptions|main_pulse${settings_gamemode_init}${settings_mangohud_init}${settings_vkbasalt_init}"
	elif [[ "$1" == "Libstrangle Options" ]]; then listoptions "$1" "Enable libstrangle|Max Framerate|Max Framerate for Battery Power|Vsync|Run glFinish after every frame (OpenGL only)|Mip-map LoD Bias|Anisotropic Filtering level (Vulkan Only)|Force Trilinear Filtering (Vulkan only)|Disables Linear Texture Filtering (Vulkan only)|Disables the Hooking of Dlsym|Stops Strangle's OpenGL libs from loading|Enables the Implicit Vulkan layer|Disables the Implicit Vulkan layer|Reset Options" "strangle" "strangle_status|strangle_fps|strangle_fps_battery|strangle_vsync|strangle_glfinish|strangle_picmip|strangle_af|strangle_trilinear|strangle_retro|strangle_nodlsym|strangle_vkonly|strangle_enable_vklayer|strangle_disable_vklayer"
	elif [[ "$1" == "Wine Options" ]]; then listoptions "$1" "Enable ESYNC|Enable FSYNC|Enable Virtual Desktop|Reset Options" "wine" "wine_esync|wine_fsync|wine_vd" "$2"
	elif [[ "$1" == "Proton Options" ]]; then listoptions "$1" "Enable WineD3D|Enable Large Address Aware|Enable Old GL String|Enable Seccomp|Disable D3D12|Disable D3D11|Disable D3D10|Disable D3D9|Disable ESYNC|Disable FSYNC|Disable FUTEX2|Reset Options" "proton" "proton_wined3d|proton_large_address|proton_old_gl|proton_seccomp|proton_d3d12|proton_d3d11|proton_d3d10|proton_d3d9|proton_esync|proton_fsync|proton_futex2"
	elif [[ "$1" == "DxvkHUD Options" ]]; then listoptions "$1" "Enable DxvkHUD|Enable All Options|Displays the name of the GPU and the driver version|Shows the current frame rate|Shows a frame time graph|Shows the number of command buffers submitted per frame|Shows the number of draw calls and render passes per frame|Shows the total number of graphics and compute pipelines|Shows the amount of device memory allocated and used|Shows estimated GPU load. May be inaccurate|Shows DXVK version|Shows the D3D feature level used by the application|Shows shader compiler activity|Shows the current number of sampler pairs used [D3D9 Only]|Scales the HUD|Reset Options" "dxvkhud" "dxvkhud_status|dxvkhud_full|dxvkhud_devinfo|dxvkhud_fps|dxvkhud_frametimes|dxvkhud_submission|dxvkhud_drawcall|dxvkhud_pipelines|dxvkhud_memory|dxvkhud_gpuload|dxvkhud_version|dxvkhud_api|dxvkhud_compiler|dxvkhud_samplers|dxvkhud_scale"
	elif [[ "$1" == "Dxvk Options" ]]; then listoptions "$1" "Enable Dxvk Async|Disable State Cache|Reset Options" "dxvk" "dxvk_async|dxvk_cache";
	elif [[ "$1" == "NVIDIA Options" ]]; then listoptions "$1" "Enable NVIDIA Threaded Optimization|Enable NVIDIA Graphics API Visual Indicator|Reset Options" "nvidia" "nvidia_to|nvidia_osd"
	elif [[ "$1" == "AMD Options" ]]; then listoptions "$1" "Enable AMD Radeon ACO Vulkan Compiler|Enable AMD Threaded Optimizations|Reset Options" "amd" "amd_aco|amd_to"; fi
}

mainselector() {
	if [[ "$1" == "Add Additional Arguments" ]]; then
		inputhistory "$HISTORYPATH/.argshistory" "${cyc}Additional Arguments${noc}"
		if [[ "$input_ans" != [qQйЙ] ]]; then main_args="$input_ans"; fi
	elif [[ "$1" == "Add Custom Options" ]]; then
		inputhistory "$HISTORYPATH/.options" "${cyc}Custom Options${noc}"
		if [[ "$input_ans" != [qQйЙ] ]]; then main_customoptions="$input_ans "; fi
	elif [[ "$1" == "Enable Pulse Audio Latency" ]]; then
		inputhistory "$HISTORYPATH/.pulsehistory" "${cyc}value(ms)${noc} of ${grc}Pulse Audio Latency${noc}" "" "60"
		if [[ "$input_ans" != [qQйЙ] ]]; then main_pulse="PULSE_LATENCY_MSEC=$input_ans "; fi
	elif [[ "$1" == "Enable Gamemode" ]]; then main_gamemode="gamemoderun "
	elif [[ "$1" == "Enable MangoHud" ]]; then main_mangohud="mangohud "
	elif [[ "$1" == "Enable vkBasalt" ]]; then main_vkbasalt="ENABLE_VKBASALT=1 "; fi
	if [[ "$1" == "Reset Options" ]]; then 
		main_args=""; main_customoptions=""; main_pulse=""; main_gamemode=""; main_mangohud=""; main_vkbasalt=""; fi
}

strangleselector() {
	if [[ "$1" == "Enable libstrangle" ]]; then strangle_status="strangle "
	elif [[ "$1" == "Max Framerate" ]]; then
		inputhistory "$HISTORYPATH/.framerate" "maximum ${cyc}framerate${noc}. ${cyc}0${noc} to disable. Any ${cyc}positive value${noc} to enable" "" "60"
		if [[ "$input_ans" != [qQйЙ] ]]; then strangle_fps="STRANGLE_FPS=${input_ans} "; fi
	elif [[ "$1" == "Max Framerate for Battery Power" ]]; then
		inputhistory "$HISTORYPATH/.frameratebattery" "maximum ${cyc}framerate${noc} when running on battery power. ${cyc}0${noc} to disable. Any ${cyc}positive value${noc} to enable" "" "60"
		if [[ "$input_ans" != [qQйЙ] ]]; then strangle_fps_battery="STRANGLE_FPS_BATTERY=${input_ans} "; fi
	elif [[ "$1" == "Vsync" ]]; then
		echo -e "\n	${mac}OpenGL${noc}\n ${cyc}-1${noc} - ${grc}Adaptive sync (unconfirmed if this actually works)${noc}\n ${cyc}0${noc} - ${grc}Force off${noc}\n ${cyc}1${noc} - ${grc}Force on${noc}\n ${cyc}n${noc} - ${grc}Sync to refresh rate / n${noc}\n	${mac}Vulkan${noc}\n ${cyc}0${noc} - ${grc}Force off${noc}\n ${cyc}1${noc} - ${grc}Mailbox mode. Vsync with uncapped framerate${noc}\n ${cyc}2${noc} - ${grc}Traditional vsync with framerate capped to refresh rate${noc}\n ${cyc}3${noc} - ${grc}Adaptive vsync with tearing at low framerates${noc}"
		inputhistory "$HISTORYPATH/.vsyncstrangle" "${cyc}value${noc} from the list above" "" "2"
		if [[ "$input_ans" != [qQйЙ] ]]; then strangle_vsync="STRANGLE_VSYNC=${input_ans} "; fi
	elif [[ "$1" == "Run glFinish after every frame (OpenGL only)" ]]; then strangle_glfinish="STRANGLE_GLFINISH=1 "
	elif [[ "$1" == "Mip-map LoD Bias" ]]; then
		inputhistory "$HISTORYPATH/.vsyncstrangle" "${cyc}value${noc} between ${cyc}-16${noc} and ${cyc}16${noc}. Negative ${cyc}values${noc} will increase texture sharpness (and aliasing). Positive ${cyc}values${noc} will increase texture blurriness"
		if [[ "$input_ans" != [qQйЙ] ]]; then if (( ans >= -16 && ans <= 16 )); then strangle_picmip="STRANGLE_PICMIP=${input_ans} "; fi; fi
	elif [[ "$1" == "Anisotropic Filtering level (Vulkan Only)" ]]; then
		inputhistory "$HISTORYPATH/.vsyncstrangle" "${cyc}value${noc} between ${cyc}1${noc} and ${cyc}16${noc}. Improves sharpness of textures viewed at an angle"
		if [[ "$input_ans" != [qQйЙ] ]]; then if (( ans >= 1 && ans <= 16 )); then strangle_af="STRANGLE_AF=${input_ans} "; fi; fi
	elif [[ "$1" == "Force Trilinear Filtering (Vulkan only)" ]]; then strangle_trilinear="STRANGLE_TRILINEAR=1 "
	elif [[ "$1" == "Disables Linear Texture Filtering (Vulkan only)" ]]; then strangle_retro="STRANGLE_RETRO=1 "
	elif [[ "$1" == "Disables the Hooking of Dlsym" ]]; then strangle_nodlsym="STRANGLE_NODLSYM=1 "
	elif [[ "$1" == "Stops Strangle's OpenGL libs from loading" ]]; then strangle_vkonly="STRANGLE_VKONLY=1 "
	elif [[ "$1" == "Enables the Implicit Vulkan layer" ]]; then strangle_enable_vklayer="ENABLE_VK_LAYER_TORKEL104_libstrangle=1 "
	elif [[ "$1" == "Disables the Implicit Vulkan layer" ]]; then strangle_disable_vklayer="DISABLE_VK_LAYER_TORKEL104_libstrangle=1 "; fi
	if [[ "$1" == "Reset Options" ]]; then 
		strangle_fps=""; strangle_fps_battery=""; strangle_vsync=""; strangle_glfinish=""; strangle_picmip=""; strangle_af=""; strangle_trilinear=""; strangle_retro=""
		strangle_nodlsym=""; strangle_vkonly=""; strangle_enable_vklayer=""; strangle_disable_vklayer=""; strangle_status=""; fi
}

dxvkhudselector() {
	if [[ "$1" == "Enable DxvkHUD" ]]; then dxvkhud_status="DXVK_HUD="
	elif [[ "$1" == "Enable All Options" ]]; then dxvkhud_full="full "; dxvkhud_devinfo=""; dxvkhud_fps=""; dxvkhud_frametimes=""; dxvkhud_submission=""; dxvkhud_drawcall=""
		dxvkhud_pipelines=""; dxvkhud_memory=""; dxvkhud_gpuload=""; dxvkhud_version=""; dxvkhud_api=""; dxvkhud_compiler=""; dxvkhud_samplers=""; dxvkhud_scale=""
	elif [[ "$1" == "Displays the name of the GPU and the driver version" ]]; then dxvkhud_devinfo="devinfo,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the current frame rate" ]]; then dxvkhud_fps="fps,"; dxvkhud_full=""
	elif [[ "$1" == "Shows a frame time graph" ]]; then dxvkhud_frametimes="frametimes,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the number of command buffers submitted per frame" ]]; then dxvkhud_submission="submission,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the number of draw calls and render passes per frame" ]]; then dxvkhud_drawcall="drawcall,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the total number of graphics and compute pipelines" ]]; then dxvkhud_pipelines="pipelines,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the amount of device memory allocated and used" ]]; then dxvkhud_memory="memory,"; dxvkhud_full=""
	elif [[ "$1" == "Shows estimated GPU load. May be inaccurate" ]]; then dxvkhud_gpuload="gpuload,"; dxvkhud_full=""
	elif [[ "$1" == "Shows DXVK version" ]]; then dxvkhud_version="version,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the D3D feature level used by the application" ]]; then dxvkhud_api="api,"; dxvkhud_full=""
	elif [[ "$1" == "Shows shader compiler activity" ]]; then dxvkhud_compiler="compiler,"; dxvkhud_full=""
	elif [[ "$1" == "Shows the current number of sampler pairs used [D3D9 Only]" ]]; then dxvkhud_samplers="samplers,"; dxvkhud_full=""
	elif [[ "$1" == "Scales the HUD" ]]; then
		inputhistory "$HISTORYPATH/.scaledxvkhud" "${cyc}scale factor${noc} (Example: ${cyc}1.5${noc})"
		if [[ "$input_ans" != [qQйЙ] ]]; then dxvkhud_scale="scale=$input_ans,"; dxvkhud_full=""; fi; fi
	if [[ "$1" == "Reset Options" ]]; then
		dxvkhud_full=""; dxvkhud_devinfo=""; dxvkhud_fps=""; dxvkhud_frametimes=""; dxvkhud_submission=""; dxvkhud_drawcall=""; dxvkhud_pipelines=""; dxvkhud_memory=""; dxvkhud_gpuload=""
		dxvkhud_version=""; dxvkhud_api=""; dxvkhud_compiler=""; dxvkhud_samplers=""; dxvkhud_scale=""; dxvkhud_status=""; fi
}

dxvkselector() {
	if [[ "$1" == "Enable Dxvk Async" ]]; then dxvk_async="DXVK_ASYNC=1 "
	elif [[ "$1" == "Disable State Cache" ]]; then dxvk_cache="DXVK_STATE_CACHE=0 "; fi
	if [[ "$1" == "Reset Options" ]]; then dxvk_async=""; dxvk_cache=""; fi
}

nvidiaselector() {
	if [[ "$1" == "Enable NVIDIA Threaded Optimization" ]]; then nvidia_to="__GL_THREADED_OPTIMIZATIONS=1 "
	elif [[ "$1" == "Enable NVIDIA Graphics API Visual Indicator" ]]; then nvidia_osd="__GL_SHOW_GRAPHICS_OSD=1 "; fi
	if [[ "$1" == "Reset Options" ]]; then nvidia_to=""; nvidia_osd=""; fi
}

amdselector() {
	if [[ "$1" == "Enable AMD Radeon ACO Vulkan Compiler" ]]; then amd_aco="RADV_PERFTEST=aco "
	elif [[ "$1" == "Enable AMD Threaded Optimizations" ]]; then amd_to="mesa_glthread=true "; fi
	if [[ "$1" == "Reset Options" ]]; then amd_aco=""; amd_to=""; fi
}

wineselector() {
	if [[ "$1" == "Enable ESYNC" ]]; then wine_esync="WINEESYNC=1 "
	elif [[ "$1" == "Enable FSYNC" ]]; then wine_fsync="WINEFSYNC=1 "
	elif [[ "$1" == "Enable Virtual Desktop" ]]; then
		inputhistory "$HISTORYPATH/.widthhistory" "${cycc}width${noc} of ${grc}Virtual Desktop${noc}" "" "1920"
		if [[ "$input_ans" != [qQйЙ] ]]; then wine_vd="explorer /desktop='$2',${input_ans}x"; fi
		inputhistory "$HISTORYPATH/.heighthistory" "${cycc}height${noc} of ${grc}Virtual Desktop${noc}" "" "1080"
		if [[ "$input_ans" != [qQйЙ] ]]; then wine_vd="${wine_vd}${input_ans}"; fi; fi
	if [[ "$1" == "Reset Options" ]]; then wine_esync=""; wine_fsync=""; wine_vd=""; fi
}

protonselector() {
	if [[ "$1" == "Enable WineD3D" ]]; then proton_wined3d="PROTON_USE_WINED3D=1 "
	elif [[ "$1" == "Enable Large Address Aware" ]]; then proton_large_address="PROTON_FORCE_LARGE_ADDRESS_AWARE=1 "
	elif [[ "$1" == "Enable Old GL String" ]]; then proton_old_gl="PROTON_OLD_GL_STRING=1 "
	elif [[ "$1" == "Enable Seccomp" ]]; then proton_seccomp="PROTON_USE_SECCOMP=1 "
	elif [[ "$1" == "Disable D3D12" ]]; then proton_d3d12="PROTON_NO_D3D12=1 "
	elif [[ "$1" == "Disable D3D11" ]]; then proton_d3d11="PROTON_NO_D3D11=1 "
	elif [[ "$1" == "Disable D3D10" ]]; then proton_d3d10="PROTON_NO_D3D10=1 "
	elif [[ "$1" == "Disable D3D9" ]]; then proton_d3d9="PROTON_NO_D3D9=1 "
	elif [[ "$1" == "Disable ESYNC" ]]; then proton_esync="PROTON_NO_ESYNC=1 "
	elif [[ "$1" == "Disable FSYNC" ]]; then proton_fsync="PROTON_NO_FSYNC=1 "
	elif [[ "$1" == "Disable FUTEX2" ]]; then proton_futex2="PROTON_NO_FUTEX2=0 "; fi
	if [[ "$1" == "Reset Options" ]]; then 
		proton_wined3d=""; proton_large_address=""; proton_old_gl=""; proton_seccomp=""; proton_d3d12=""; proton_d3d11=""; proton_d3d10=""; proton_d3d9=""
		proton_esync=""; proton_fsync=""; proton_futex2=""; fi
}

steamfinder() {
	if [[ -f "$HOME/.steam/root/steamapps/libraryfolders.vdf" ]]; then
	IFS=$'\n'
	for D in ~/.steam/root $(egrep '^[^"]*"[0-9]+"' ~/.steam/root/steamapps/libraryfolders.vdf | cut -d\" -f4); do for F in "$D"/steamapps/appmanifest_*.acf; do 
		steam_name=$(grep '"name"' "$F" | cut -d\" -f4); steam_appid=$(grep '"appid"' "$F" | cut -d\" -f4); steam_dir=$(grep '"installdir"' "$F" | cut -d\" -f4)
		if [[ -d "$D/steamapps/compatdata/$steam_appid/pfx" ]]; then steam_pfx="$D/steamapps/compatdata/$steam_appid/pfx"; fi
		if [[ "$steam_dir" == *"Proton"* ]]; then echo -e "$D/steamapps/common/$steam_dir" >> "$TEMPPATH/.protonrun"; fi
		case $steam_name in
		*"Proton"* | *"Runtime"* | *"Steamworks"*)
		;;
		*)
		echo -e "${steam_name}\n${steam_appid}" >> "$TEMPPATH/.steamapps"
		if [[ -n "$steam_pfx" ]]; then echo -e "$steam_name\n$steam_pfx" >> "$TEMPPATH/.steampfx"; fi
		esac
	done; IFS=$Def_IFS; done; fi
}

hi_exit() {
	echo -e "\n${rec}Exit${noc}\n"; rm -rf "$TEMPPATH"
}

trap hi_exit EXIT
HIPATH="$HOME/Hist"; if [[ ! -d "$HIPATH"  ]]; then mkdir -p "$HIPATH"; fi 
TOOLSPATH="$HIPATH/Tools"; if [[ ! -d "$TOOLSPATH"  ]]; then mkdir -p "$TOOLSPATH"; fi
HISTORYPATH="$HIPATH/.historyfiles"; if [[ ! -d "$HISTORYPATH" ]]; then mkdir -p "$HISTORYPATH"; fi
LAUNCHPATH="$HIPATH/Launchers"; if [[ ! -d "$LAUNCHPATH" ]]; then mkdir -p "$LAUNCHPATH"; fi
PROTONPFXPATH="$HIPATH/Proton"; if [[ ! -d "$PROTONPFXPATH" ]]; then mkdir -p "$PROTONPFXPATH"; fi
TEMPPATH="$HIPATH/.temp"; if [[ ! -d "$TEMPPATH" ]]; then mkdir -p "$TEMPPATH"; else rm -rf "$TEMPPATH"; mkdir -p "$TEMPPATH"; fi
CONFPATH="$HIPATH/Configs"; if [[ ! -d "$CONFPATH" ]]; then mkdir -p "$CONFPATH"; fi
PACKAGESPATH="$HIPATH/Packages"; if [[ ! -d "$PACKAGESPATH" ]]; then mkdir -p "$PACKAGESPATH"; fi 
noc=$(tput sgr0); rec=$(tput setaf 1); grc=$(tput setaf 2); blc=$(tput setaf 4); cyc=$(tput setaf 6); mac=$(tput setaf 5)
Def_IFS=$IFS; video_driver=$(lspci | grep -i --color 'vga\|3d\|2d'); steamfinder
echo -e "Default\n$HOME/.wine\nCreate Prefix\nAdd new prefix to the list" > "$TEMPPATH/.launcherwinepfx"; if [[ -f "$CONFPATH/addwinepfx.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.launcherwinepfx"; done < "$CONFPATH/addwinepfx.cfg"; fi
echo -e "Default\n$HOME/.wine" > "$TEMPPATH/.winepfx"; if [[ -f "$CONFPATH/addwinepfx.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.winepfx"; done < "$CONFPATH/addwinepfx.cfg"; fi
echo -e "/usr/bin/wine" >> "$TEMPPATH/.winerun"; if [[ -f "$CONFPATH/addwinerun.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.winerun"; done < "$CONFPATH/addwinerun.cfg"; fi
echo -e "Default\n$PROTONPFXPATH\nCreate New Prefix\nAdd new prefix to the list" > "$TEMPPATH/.launcherprotonpfx"; if [[ -f "$CONFPATH/addprotonpfx.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.launcherprotonpfx"; done < "$CONFPATH/addprotonpfx.cfg"; fi
echo -e "Default\n$PROTONPFXPATH" > "$TEMPPATH/.protonpfx"; if [[ -f "$CONFPATH/addprotonpfx.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.protonpfx"; done < "$CONFPATH/addprotonpfx.cfg"; fi
echo -e "/usr/share/steam/compatibilitytools.d/" >> "$TEMPPATH/.protonrun"; if [[ -f "$CONFPATH/addprotonrun.cfg" ]]; then while read line; do echo "$line" >>  "$TEMPPATH/.protonrun"; done < "$CONFPATH/addprotonrun.cfg"; fi
echo -e "Wine Config\nwinecfg\nControl Panel\ncontrol\nTask Manager\ntaskmgr\nExplorer\nexplorer\nInstall|Uninstall Apps\nuninstaller\nRegistry Editor\nregedit\nKill Running Apps\nwineserver -k\nForce Kill Running Apps\nwineserver -k9\nCustom command\nSelect this for input custom prefix command" >> "$TEMPPATH/.functions"
echo -e "Dxvk\nhttps://github.com/doitsujin/dxvk
Vkd3d\nhttps://github.com/HansKristian-Work/vkd3d-proton
VkBasalt\nhttps://github.com/DadSchoorse/vkBasalt
Gamemode\nhttps://github.com/FeralInteractive/gamemode
MangoHud\nhttps://github.com/flightlessmango/MangoHud
libStrangle\nhttps://gitlab.com/torkel104/libstrangle
Media Foundation Workaround\nhttps://github.com/z0z0z/mf-install
Media Foundation Workaround Cab Version\nhttps://github.com/z0z0z/mf-installcab" > "$TEMPPATH/.winetools"
if [[ -n "$(ls "$LAUNCHPATH")" ]]; then ls "$LAUNCHPATH/"* | while read line; do echo "$line" >> "$TEMPPATH/.launchers"; done; fi
listoptions "Linux Game Helper by Hist" "Launchers Manager|Wine Utilities|Tools Installer|Lists Manager"
if [[ "$select_ans" == "1" ]]; then #Launchers Control
	listoptions "Launchers Manager" "Create Launcher|Edit Launcher|Delete Launcher|Open Launcher in Text Editor|Run Launcher"
		if [[ "$select_ans" == "1" ]]; then
			listoptions "Launcher Creator" "Wine App|Proton App|Linux App|Steam App"
			if [[ "$select_ans" == "1" ]]; then launchercreator "wine"
			elif [[ "$select_ans" == "2" ]]; then launchercreator "proton"
			elif [[ "$select_ans" == "3" ]]; then launchercreator "linux"
			elif [[ "$select_ans" == "4" ]]; then launchercreator "steam"; fi
		elif [[ "$select_ans" == "2" ]]; then launchereditor
		elif [[ "$select_ans" == "3" ]]; then readfiles "Launchers" "$TEMPPATH/.launchers" "line" "ans"; rm "$file_line_dir"
		elif [[ "$select_ans" == "4" ]]; then readfiles "Launchers" "$TEMPPATH/.launchers" "line" "ans"; xdg-open "$file_line_dir"
		elif [[ "$select_ans" == "5" ]]; then readfiles "Launchers" "$TEMPPATH/.launchers" "line" "ans"; "$file_line_dir"; fi
elif [[ "$select_ans" == "2" ]]; then #Wine Utilities
	listoptions "Wine Utilities" "Prefix Commands|Winetricks|Dxvk|Vkd3d|Install MF|Install MF-Cab|Install mfplat.dll"
	if [[ "$select_ans" == "1" ]]; then
		listoptions "Options List" "Wine|Proton|Steam"
		if [[ "$select_ans" == "1" ]]; then pfxcommands "wine"
		elif [[ "$select_ans" == "2" ]]; then pfxcommands "proton"
		elif [[ "$select_ans" == "3" ]]; then pfxcommands "steam"; fi		
	elif [[ "$select_ans" == "2" ]]; then
		listoptions "Options List" "Wine|Proton|Steam"
		if [[ "$select_ans" == "1" ]]; then selected_option="wine"; elif [[ "$select_ans" == "2" ]]; then selected_option="proton"; elif [[ "$select_ans" == "3" ]]; then selected_option="steam"; fi
		runnerinit "$selected_option" "original"; wt_runner="$init_result"; pfxinit "$selected_option" "original"; wt_prefix="$init_result"
		if [[ -n "$wt_prefix" ]]; then inputhistory "$HISTORYPATH/.winetricks" "${cyc}winetricks arguments${noc}" "exit" "gui"
			if [[ "$input_ans" == "gui" ]]; then 
				WINEPREFIX="$wt_prefix" WINE="$wt_runner" winetricks; else WINEPREFIX="$wt_prefix" WINE="$wt_runner" winetricks $input_ans; fi; fi
	elif [[ "$select_ans" == "3" ]]; then
		if [[ -d "$TOOLSPATH/dxvk" ]]; then
			listoptions "Options List" "Install|Uninstall"; 
			if [[ "$select_ans" == "1" ]]; then update_option="install"
			elif [[ "$select_ans" == "2" ]]; then update_option="uninstall"; fi
			pfxinit "wine"; update_prefix="$init_result"
			WINEPREFIX="$update_prefix" "$TOOLSPATH/dxvk/dlls/dxvk-master/setup_dxvk.sh" $update_option
		else echo -e "\nInstall ${grc}Dxvk${noc} from ${grc}Tools Installer${noc} menu!"; fi
	elif [[ "$select_ans" == "4" ]]; then
		if [[ -d "$TOOLSPATH/vkd3d-proton" ]]; then
			listoptions "Options List" "Install|Uninstall"; 
			if [[ "$select_ans" == "1" ]]; then update_option="install"
			elif [[ "$select_ans" == "2" ]]; then update_option="uninstall"; fi
			pfxinit "wine"; update_prefix="$init_result"
			if [[ ! -f "$update_prefix/drive_c/windows/system32/d3d12.dll" ]]; then touch "$update_prefix/drive_c/windows/system32/d3d12.dll"
			elif [[ ! -f "$update_prefix/drive_c/windows/syswow64/d3d12.dll" ]]; then touch "$update_prefix/drive_c/windows/syswow64/d3d12.dll"; fi
			WINEPREFIX="$update_prefix" "$TOOLSPATH/vkd3d-proton/dlls/vkd3d-proton-master/setup_vkd3d_proton.sh" $update_option
		else echo -e "\nInstall ${grc}Vkd3d${noc} from ${grc}Tools Installer${noc} menu!"; fi
	elif [[ "$select_ans" == "5" ]]; then
		if [[ -d "$TOOLSPATH/mf-install" ]]; then
			listoptions "Options List" "Wine|Proton|Steam"
			if [[ "$select_ans" == "1" ]]; then pfxinit "wine" 
			elif [[ "$select_ans" == "2" ]]; then pfxinit "proton" "original"
			elif [[ "$select_ans" == "3" ]]; then pfxinit "steam" "original"; fi; update_prefix="$init_result"
			WINEPREFIX="$update_prefix" "$TOOLSPATH/mf-install/mf-install.sh"
		else echo -e "\nInstall ${grc}MF${noc} from ${grc}Tools Installer${noc} menu!"; fi
	elif [[ "$select_ans" == "6" ]]; then
		if [[ -d "$TOOLSPATH/mf-installcab" ]]; then
			listoptions "Options List" "Wine|Proton|Steam"
			if [[ "$select_ans" == "1" ]]; then pfxinit "wine" 
			elif [[ "$select_ans" == "2" ]]; then pfxinit "proton" "original"
			elif [[ "$select_ans" == "3" ]]; then pfxinit "steam" "original"; fi; update_prefix="$init_result"
			WINEPREFIX="$update_prefix" "$TOOLSPATH/mf-installcab/install-mf-64.sh"
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Tools Installer${noc} menu!"; fi
	elif [[ "$select_ans" == "7" ]]; then
		if [[ -d "$TOOLSPATH/mf-installcab" ]]; then execinit "wine"; cp "$TOOLSPATH/mf-installcab/mfplat.dll" "$init_result_dir"
		else echo -e "\nInstall ${grc}MF-Cab${noc} from ${grc}Tools Installer${noc} menu!"; fi; fi
elif [[ "$select_ans" == "3" ]]; then #Tools Installer
	readfiles "Tools Installer" "$TEMPPATH/.winetools" "lines" "ans"; tool_url="$file_line_dir"; tool_name="$file_line_name"
		if [[ "$tool_name" == "Vkd3d" ]]; then toolsupdater "$tool_url" "--recursive"
		elif [[ "$tool_name" == "MangoHud" ]]; then toolsupdater "$tool_url" "--recurse-submodules"
		else toolsupdater "$tool_url"; fi
elif [[ "$select_ans" == "4" ]]; then #List Manager
	listoptions "Lists Manager" "Add Wine Prefix|Delete Wine Prefix|Add Wine Runner|Delete Wine Runner|Add Proton Prefix|Delete Proton Prefix|Add Proton Runner|Delete Proton Runner|Reset Steam Prefix|Reset Default Wine Prefix|Reset Default Proton Prefix"
	if [[ "$select_ans" == "$((menu_count=1))" ]]; then pfxcreator "wine"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then deletelines "Wine Prefixes" "$CONFPATH/addwinepfx.cfg" "lines"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then addlines "Runner Folder" dir - tofile "$CONFPATH/addwinerun.cfg" "winerun"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then deletelines "Wine Runners" "$CONFPATH/addwinerun.cfg" "line"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then pfxcreator "proton"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then deletelines "Proton Prefixes" "$CONFPATH/addprotonpfx.cfg" "lines"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then addlines "Runner Folder" dir - tofile "$CONFPATH/addprotonrun.cfg" "protonrun"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then deletelines "Proton Runners" "$CONFPATH/addprotonrun.cfg" "line"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then deletelines "Steam Prefixes" "$TEMPPATH/.steampfx" "lines" "delete" "steam"
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then
		rm -rf "$HOME/.wine"; mkdir "$HOME/.wine"; runnerinit "wine"; pfx_runner="$init_result"; WINEPREFIX="$HOME/.wine" "$pfx_runner" wineboot -u
	elif [[ "$select_ans" == "$((menu_count+=1))" ]]; then
		rm -rf "$PROTONPFXPATH"; mkdir "$PROTONPFXPATH"; runnerinit "proton" "original"; pfx_runner="$init_result"
		WINEPREFIX="$PROTONPFXPATH/pfx" "$pfx_runner" wineboot -u; fi; fi
